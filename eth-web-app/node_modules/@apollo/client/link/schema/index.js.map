{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/link/schema/index.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,OAAO,EAAiB,MAAM,SAAS,CAAC;AAEjD,OAAO,EAAE,UAAU,EAA0B,MAAM,SAAS,CAAC;AAC7D,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AA0B7C;IAAgC,8BAAU;IAKxC,oBAAY,OAA2B;QAAvC,YACE,iBAAO,SAIR;QAHC,KAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC7B,KAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACnC,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;;IACjC,CAAC;IAEM,4BAAO,GAAd,UAAe,SAAoB;QAAnC,iBA0BC;QAzBC,OAAO,IAAI,UAAU,CAAc,UAAA,QAAQ;YACzC,IAAI,OAAO,CACT,UAAA,OAAO,IAAI,OAAA,OAAO,CAChB,OAAO,KAAI,CAAC,OAAO,KAAK,UAAU;gBAChC,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC;gBACzB,CAAC,CAAC,KAAI,CAAC,OAAO,CACjB,EAJU,CAIV,CACF,CAAC,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CACvB,KAAI,CAAC,MAAM,EACX,SAAS,CAAC,KAAK,EACf,KAAI,CAAC,SAAS,EACd,OAAO,EACP,SAAS,CAAC,SAAS,EACnB,SAAS,CAAC,aAAa,CACxB,EAPiB,CAOjB,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI;gBACV,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;oBACpB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBACrB;YACH,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,KAAK;gBACZ,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;oBACpB,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;iBACvB;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IACH,iBAAC;AAAD,CAAC,AAvCD,CAAgC,UAAU,GAuCzC","sourcesContent":["import { execute, GraphQLSchema } from 'graphql';\n\nimport { ApolloLink, Operation, FetchResult } from '../core';\nimport { Observable } from '../../utilities';\n\nexport namespace SchemaLink {\n  export type ResolverContext = Record<string, any>;\n  export type ResolverContextFunction = (\n    operation: Operation,\n  ) => ResolverContext | PromiseLike<ResolverContext>;\n\n  export interface Options {\n    /**\n     * The schema to generate responses from.\n     */\n    schema: GraphQLSchema;\n\n    /**\n     * The root value to use when generating responses.\n     */\n    rootValue?: any;\n\n    /**\n     * A context to provide to resolvers declared within the schema.\n     */\n    context?: ResolverContext | ResolverContextFunction;\n  }\n}\n\nexport class SchemaLink extends ApolloLink {\n  public schema: SchemaLink.Options[\"schema\"];\n  public rootValue: SchemaLink.Options[\"rootValue\"];\n  public context: SchemaLink.Options[\"context\"];\n\n  constructor(options: SchemaLink.Options) {\n    super();\n    this.schema = options.schema;\n    this.rootValue = options.rootValue;\n    this.context = options.context;\n  }\n\n  public request(operation: Operation): Observable<FetchResult> {\n    return new Observable<FetchResult>(observer => {\n      new Promise<SchemaLink.ResolverContext>(\n        resolve => resolve(\n          typeof this.context === 'function'\n            ? this.context(operation)\n            : this.context\n        )\n      ).then(context => execute(\n        this.schema,\n        operation.query,\n        this.rootValue,\n        context,\n        operation.variables,\n        operation.operationName,\n      )).then(data => {\n        if (!observer.closed) {\n          observer.next(data);\n          observer.complete();\n        }\n      }).catch(error => {\n        if (!observer.closed) {\n          observer.error(error);\n        }\n      });\n    });\n  }\n}\n"]}