{"version":3,"file":"mockLink.js","sourceRoot":"","sources":["../../../../src/utilities/testing/mocking/mockLink.ts"],"names":[],"mappings":"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","sourcesContent":["import { print } from 'graphql';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nimport {\n  ApolloLink,\n  Operation,\n  GraphQLRequest,\n  FetchResult,\n} from '../../../link/core';\n\nimport {\n  Observable,\n  addTypenameToDocument,\n  removeClientSetsFromDocument,\n  removeConnectionDirectiveFromDocument,\n  cloneDeep,\n} from '../../../utilities';\n\nexport type ResultFunction<T> = () => T;\n\nexport interface MockedResponse<TData = Record<string, any>> {\n  request: GraphQLRequest;\n  result?: FetchResult<TData> | ResultFunction<FetchResult<TData>>;\n  error?: Error;\n  delay?: number;\n  newData?: ResultFunction<FetchResult>;\n}\n\nfunction requestToKey(request: GraphQLRequest, addTypename: Boolean): string {\n  const queryString =\n    request.query &&\n    print(addTypename ? addTypenameToDocument(request.query) : request.query);\n  const requestKey = { query: queryString };\n  return JSON.stringify(requestKey);\n}\n\nexport class MockLink extends ApolloLink {\n  public operation: Operation;\n  public addTypename: Boolean = true;\n  private mockedResponsesByKey: { [key: string]: MockedResponse[] } = {};\n\n  constructor(\n    mockedResponses: ReadonlyArray<MockedResponse>,\n    addTypename: Boolean = true\n  ) {\n    super();\n    this.addTypename = addTypename;\n    if (mockedResponses) {\n      mockedResponses.forEach(mockedResponse => {\n        this.addMockedResponse(mockedResponse);\n      });\n    }\n  }\n\n  public addMockedResponse(mockedResponse: MockedResponse) {\n    const normalizedMockedResponse = this.normalizeMockedResponse(\n      mockedResponse\n    );\n    const key = requestToKey(\n      normalizedMockedResponse.request,\n      this.addTypename\n    );\n    let mockedResponses = this.mockedResponsesByKey[key];\n    if (!mockedResponses) {\n      mockedResponses = [];\n      this.mockedResponsesByKey[key] = mockedResponses;\n    }\n    mockedResponses.push(normalizedMockedResponse);\n  }\n\n  public request(operation: Operation): Observable<FetchResult> | null {\n    this.operation = operation;\n    const key = requestToKey(operation, this.addTypename);\n    let responseIndex: number = 0;\n    const response = (this.mockedResponsesByKey[key] || []).find(\n      (res, index) => {\n        const requestVariables = operation.variables || {};\n        const mockedResponseVariables = res.request.variables || {};\n        if (equal(requestVariables, mockedResponseVariables)) {\n          responseIndex = index;\n          return true;\n        }\n        return false;\n      }\n    );\n\n    if (!response || typeof responseIndex === 'undefined') {\n      this.onError(new Error(\n        `No more mocked responses for the query: ${print(\n          operation.query\n        )}, variables: ${JSON.stringify(operation.variables)}`\n      ));\n      return null;\n    }\n\n    this.mockedResponsesByKey[key].splice(responseIndex, 1);\n\n    const { newData } = response!;\n\n    if (newData) {\n      response!.result = newData();\n      this.mockedResponsesByKey[key].push(response!);\n    }\n\n    const { result, error, delay } = response!;\n\n    if (!result && !error) {\n      this.onError(new Error(\n        `Mocked response should contain either result or error: ${key}`\n      ));\n    }\n\n    return new Observable(observer => {\n      let timer = setTimeout(\n        () => {\n          if (error) {\n            observer.error(error);\n          } else {\n            if (result) {\n              observer.next(\n                typeof result === 'function'\n                  ? (result as ResultFunction<FetchResult>)()\n                  : result\n              );\n            }\n            observer.complete();\n          }\n        },\n        delay ? delay : 0\n      );\n\n      return () => {\n        clearTimeout(timer);\n      };\n    });\n  }\n\n  private normalizeMockedResponse(\n    mockedResponse: MockedResponse\n  ): MockedResponse {\n    const newMockedResponse = cloneDeep(mockedResponse);\n    const queryWithoutConnection = removeConnectionDirectiveFromDocument(\n        newMockedResponse.request.query\n    );\n    invariant(queryWithoutConnection, \"query is required\");\n    newMockedResponse.request.query = queryWithoutConnection!;\n    const query = removeClientSetsFromDocument(newMockedResponse.request.query);\n    if (query) {\n      newMockedResponse.request.query = query;\n    }\n    return newMockedResponse;\n  }\n}\n\nexport interface MockApolloLink extends ApolloLink {\n  operation?: Operation;\n}\n\n// Pass in multiple mocked responses, so that you can test flows that end up\n// making multiple queries to the server.\n// NOTE: The last arg can optionally be an `addTypename` arg.\nexport function mockSingleLink(\n  ...mockedResponses: Array<any>\n): MockApolloLink {\n  // To pull off the potential typename. If this isn't a boolean, we'll just\n  // set it true later.\n  let maybeTypename = mockedResponses[mockedResponses.length - 1];\n  let mocks = mockedResponses.slice(0, mockedResponses.length - 1);\n\n  if (typeof maybeTypename !== 'boolean') {\n    mocks = mockedResponses;\n    maybeTypename = true;\n  }\n\n  return new MockLink(mocks, maybeTypename);\n}\n"]}