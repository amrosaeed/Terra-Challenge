{"ast":null,"code":"import _objectSpread from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{useRecoilValue}from\"recoil\";import delist from\"../../whitelist/delist.json\";import{gt}from\"../../libs/math\";import{format,formatAsset}from\"../../libs/parse\";import{percent}from\"../../libs/num\";import StakeItemCard from\"../../components/StakeItemCard\";import{uniswapLinksQuery}from\"../../database/uniswap\";import{balanceQuery}from\"../../database/balance\";import AddToMetamask from\"./AddToMetamask\";import StakeItemButton from\"./StakeItemButton\";var StakeItem=function StakeItem(props){var token=props.token,symbol=props.symbol,lp=props.lp,pool=props.pool,price=props.price,apr=props.apr,lpStaked=props.lpStaked;var stakable=useRecoilValue(balanceQuery(lp));var staked=useRecoilValue(balanceQuery(pool));var _useRecoilValue=useRecoilValue(uniswapLinksQuery(token)),swap=_useRecoilValue.swap,add=_useRecoilValue.add;var item={token:token,symbol:symbol,stakable:stakable?gt(stakable,0):false,staked:staked?gt(staked,0):false,apr:percent(apr),totalStaked:formatAsset(lpStaked,\"LP\",{integer:true}),price:\"\".concat(format(price),\" UST\"),emphasize:symbol===\"MIR\"};var isDelisted=Object.keys(delist).includes(symbol);return/*#__PURE__*/_jsxs(StakeItemCard,_objectSpread(_objectSpread({},item),{},{action:/*#__PURE__*/_jsx(AddToMetamask,_objectSpread({},props)),children:[/*#__PURE__*/_jsx(StakeItemButton,{href:swap,children:\"Buy token\"}),/*#__PURE__*/_jsx(StakeItemButton,{href:add,delisted:isDelisted,children:\"Provide liquidity\"}),/*#__PURE__*/_jsx(StakeItemButton,{to:\"/stake/\".concat(token),delisted:isDelisted,children:\"Stake LP\"})]}));};export default StakeItem;","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/pages/home/StakeItem.tsx"],"names":["useRecoilValue","delist","gt","format","formatAsset","percent","StakeItemCard","uniswapLinksQuery","balanceQuery","AddToMetamask","StakeItemButton","StakeItem","props","token","symbol","lp","pool","price","apr","lpStaked","stakable","staked","swap","add","item","totalStaked","integer","emphasize","isDelisted","Object","keys","includes"],"mappings":"mPAAA,OAASA,cAAT,KAA+B,QAA/B,CAEA,MAAOC,CAAAA,MAAP,KAAmB,6BAAnB,CAEA,OAASC,EAAT,KAAmB,iBAAnB,CACA,OAASC,MAAT,CAAiBC,WAAjB,KAAoC,kBAApC,CACA,OAASC,OAAT,KAAwB,gBAAxB,CACA,MAAOC,CAAAA,aAAP,KAA0B,gCAA1B,CAEA,OAASC,iBAAT,KAAkC,wBAAlC,CACA,OAASC,YAAT,KAA6B,wBAA7B,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,KAAD,CAAsB,IAC9BC,CAAAA,KAD8B,CACoBD,KADpB,CAC9BC,KAD8B,CACvBC,MADuB,CACoBF,KADpB,CACvBE,MADuB,CACfC,EADe,CACoBH,KADpB,CACfG,EADe,CACXC,IADW,CACoBJ,KADpB,CACXI,IADW,CACLC,KADK,CACoBL,KADpB,CACLK,KADK,CACEC,GADF,CACoBN,KADpB,CACEM,GADF,CACOC,QADP,CACoBP,KADpB,CACOO,QADP,CAEtC,GAAMC,CAAAA,QAAQ,CAAGpB,cAAc,CAACQ,YAAY,CAACO,EAAD,CAAb,CAA/B,CACA,GAAMM,CAAAA,MAAM,CAAGrB,cAAc,CAACQ,YAAY,CAACQ,IAAD,CAAb,CAA7B,CAHsC,oBAIhBhB,cAAc,CAACO,iBAAiB,CAACM,KAAD,CAAlB,CAJE,CAI9BS,IAJ8B,iBAI9BA,IAJ8B,CAIxBC,GAJwB,iBAIxBA,GAJwB,CAMtC,GAAMC,CAAAA,IAAI,CAAG,CACXX,KAAK,CAALA,KADW,CAEXC,MAAM,CAANA,MAFW,CAGXM,QAAQ,CAAEA,QAAQ,CAAGlB,EAAE,CAACkB,QAAD,CAAW,CAAX,CAAL,CAAqB,KAH5B,CAIXC,MAAM,CAAEA,MAAM,CAAGnB,EAAE,CAACmB,MAAD,CAAS,CAAT,CAAL,CAAmB,KAJtB,CAKXH,GAAG,CAAEb,OAAO,CAACa,GAAD,CALD,CAMXO,WAAW,CAAErB,WAAW,CAACe,QAAD,CAAW,IAAX,CAAiB,CAAEO,OAAO,CAAE,IAAX,CAAjB,CANb,CAOXT,KAAK,WAAKd,MAAM,CAACc,KAAD,CAAX,QAPM,CAQXU,SAAS,CAAEb,MAAM,GAAK,KARX,CAAb,CAWA,GAAMc,CAAAA,UAAU,CAAGC,MAAM,CAACC,IAAP,CAAY7B,MAAZ,EAAoB8B,QAApB,CAA6BjB,MAA7B,CAAnB,CAEA,mBACE,MAAC,aAAD,gCAAmBU,IAAnB,MAAyB,MAAM,cAAE,KAAC,aAAD,kBAAmBZ,KAAnB,EAAjC,wBACE,KAAC,eAAD,EAAiB,IAAI,CAAEU,IAAvB,uBADF,cAGE,KAAC,eAAD,EAAiB,IAAI,CAAEC,GAAvB,CAA4B,QAAQ,CAAEK,UAAtC,+BAHF,cAOE,KAAC,eAAD,EAAiB,EAAE,kBAAYf,KAAZ,CAAnB,CAAwC,QAAQ,CAAEe,UAAlD,sBAPF,IADF,CAaD,CAhCD,CAkCA,cAAejB,CAAAA,SAAf","sourcesContent":["import { useRecoilValue } from \"recoil\"\n\nimport delist from \"../../whitelist/delist.json\"\n\nimport { gt } from \"../../libs/math\"\nimport { format, formatAsset } from \"../../libs/parse\"\nimport { percent } from \"../../libs/num\"\nimport StakeItemCard from \"../../components/StakeItemCard\"\n\nimport { uniswapLinksQuery } from \"../../database/uniswap\"\nimport { balanceQuery } from \"../../database/balance\"\nimport AddToMetamask from \"./AddToMetamask\"\nimport StakeItemButton from \"./StakeItemButton\"\n\nconst StakeItem = (props: AssetInfo) => {\n  const { token, symbol, lp, pool, price, apr, lpStaked } = props\n  const stakable = useRecoilValue(balanceQuery(lp))\n  const staked = useRecoilValue(balanceQuery(pool))\n  const { swap, add } = useRecoilValue(uniswapLinksQuery(token))\n\n  const item = {\n    token,\n    symbol,\n    stakable: stakable ? gt(stakable, 0) : false,\n    staked: staked ? gt(staked, 0) : false,\n    apr: percent(apr),\n    totalStaked: formatAsset(lpStaked, \"LP\", { integer: true }),\n    price: `${format(price)} UST`,\n    emphasize: symbol === \"MIR\",\n  }\n\n  const isDelisted = Object.keys(delist).includes(symbol)\n\n  return (\n    <StakeItemCard {...item} action={<AddToMetamask {...props} />}>\n      <StakeItemButton href={swap}>Buy token</StakeItemButton>\n\n      <StakeItemButton href={add} delisted={isDelisted}>\n        Provide liquidity\n      </StakeItemButton>\n\n      <StakeItemButton to={`/stake/${token}`} delisted={isDelisted}>\n        Stake LP\n      </StakeItemButton>\n    </StakeItemCard>\n  )\n}\n\nexport default StakeItem\n"]},"metadata":{},"sourceType":"module"}