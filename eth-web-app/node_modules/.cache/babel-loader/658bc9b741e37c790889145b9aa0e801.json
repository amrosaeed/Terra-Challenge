{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashAmino = void 0;\n\nvar sha256_1 = __importDefault(require(\"crypto-js/sha256\"));\n\nvar enc_base64_1 = __importDefault(require(\"crypto-js/enc-base64\"));\n/*\nDEPRECATED (was used by crypto-js)\nfunction byteArrayToWordArray(ba: Uint8Array): CryptoJS.LibWordArray {\n  const wa: number[] = [];\n  for (let i = 0; i < ba.length; i += 1) {\n    wa[(i / 4) | 0] |= ba[i] << (24 - 8 * i);\n  }\n  return crypto.lib.WordArray.create(wa);\n}*/\n\n/**\n * Calculates the transaction hash from Amino-encoded string.\n * @param txData Amino-encoded string (base64)\n */\n\n\nfunction hashAmino(txData) {\n  return sha256_1.default(enc_base64_1.default.parse(txData)).toString().toUpperCase();\n}\n\nexports.hashAmino = hashAmino;","map":{"version":3,"sources":["../../src/util/hash.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,eAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAAA;AAEA;;;;;;;;AAQG;;AAEH;;;AAGG;;;AACH,SAAgB,SAAhB,CAA0B,MAA1B,EAAwC;AACtC,SAAO,QAAA,CAAA,OAAA,CAAO,YAAA,CAAA,OAAA,CAAO,KAAP,CAAa,MAAb,CAAP,EAA6B,QAA7B,GAAwC,WAAxC,EAAP;AACD;;AAFD,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashAmino = void 0;\nvar sha256_1 = __importDefault(require(\"crypto-js/sha256\"));\nvar enc_base64_1 = __importDefault(require(\"crypto-js/enc-base64\"));\n/*\nDEPRECATED (was used by crypto-js)\nfunction byteArrayToWordArray(ba: Uint8Array): CryptoJS.LibWordArray {\n  const wa: number[] = [];\n  for (let i = 0; i < ba.length; i += 1) {\n    wa[(i / 4) | 0] |= ba[i] << (24 - 8 * i);\n  }\n  return crypto.lib.WordArray.create(wa);\n}*/\n/**\n * Calculates the transaction hash from Amino-encoded string.\n * @param txData Amino-encoded string (base64)\n */\nfunction hashAmino(txData) {\n    return sha256_1.default(enc_base64_1.default.parse(txData)).toString().toUpperCase();\n}\nexports.hashAmino = hashAmino;\n//# sourceMappingURL=hash.js.map"]},"metadata":{},"sourceType":"script"}