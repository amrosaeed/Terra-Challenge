{"ast":null,"code":"import _objectSpread from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{useRecoilValue}from\"recoil\";import{gt}from\"../../libs/math\";import{formatAsset}from\"../../libs/parse\";import getLpName from\"../../libs/getLpName\";import Card from\"../../components/Card\";import Table from\"../../components/Table\";import Delisted from\"../../components/Delisted\";import DashboardActions from\"../../components/DashboardActions\";import{useListedAssets}from\"../../database/assets\";import{useAssetsBalances}from\"../../database/balances\";import{rewardsQuery}from\"../../database/rewards\";import{getUniswapLinksQuery}from\"../../database/uniswap\";var Stake=function Stake(){var listedAll=useListedAssets(\"all\");var stakableBalances=useAssetsBalances(\"lp\");var stakedBalances=useAssetsBalances(\"pool\");var rewards=useRecoilValue(rewardsQuery);var getUniswapLinks=useRecoilValue(getUniswapLinksQuery);var data=[stakableBalances,stakedBalances,rewards];var loading=data.some(function(balances){return Object.values(balances).some(function(_ref){var state=_ref.state;return state!==\"hasValue\";});});var dataSource=listedAll.filter(function(_ref2){var token=_ref2.token;return data.some(function(balances){return gt(balances[token].contents,0);});}).map(function(item){var token=item.token;return _objectSpread(_objectSpread({},item),{},{stakable:stakableBalances[token].contents,staked:stakedBalances[token].contents,reward:rewards[token].contents});});var empty=!loading&&!dataSource.length;return/*#__PURE__*/_jsx(Card,{title:\"Stake\",loading:loading,children:empty?/*#__PURE__*/_jsx(\"p\",{children:\"No data\"}):/*#__PURE__*/_jsx(Table,{columns:[{key:\"symbol\",title:\"Pool Name\",render:function render(symbol,_ref3){var status=_ref3.status;return/*#__PURE__*/_jsxs(_Fragment,{children:[status===\"DELISTED\"&&/*#__PURE__*/_jsx(Delisted,{}),getLpName(symbol)]});},bold:true},{key:\"staked\",render:function render(value){return formatAsset(value,\"LP\");},align:\"right\"},{key:\"stakable\",render:function render(value){return formatAsset(value,\"LP\");},align:\"right\"},{key:\"reward\",render:function render(value){return formatAsset(value,\"MIR\");},align:\"right\"},{key:\"actions\",dataIndex:\"token\",render:function render(token){var path=\"/stake/\".concat(token);var _getUniswapLinks=getUniswapLinks(token),remove=_getUniswapLinks.remove;var list=[{to:\"\".concat(path,\"#stake\"),children:\"Stake\"},{to:\"\".concat(path,\"#unstake\"),children:\"Unstake\"},{to:\"/claim/\".concat(token),children:\"Claim\"},{href:remove,children:\"Remove liquidity\"}];return/*#__PURE__*/_jsx(DashboardActions,{list:list});},align:\"right\",fixed:\"right\"}],dataSource:dataSource})});};export default Stake;","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/pages/my/Stake.tsx"],"names":["useRecoilValue","gt","formatAsset","getLpName","Card","Table","Delisted","DashboardActions","useListedAssets","useAssetsBalances","rewardsQuery","getUniswapLinksQuery","Stake","listedAll","stakableBalances","stakedBalances","rewards","getUniswapLinks","data","loading","some","balances","Object","values","state","dataSource","filter","token","contents","map","item","stakable","staked","reward","empty","length","key","title","render","symbol","status","bold","value","align","dataIndex","path","remove","list","to","children","href","fixed"],"mappings":"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","sourcesContent":["import { useRecoilValue } from \"recoil\"\nimport { gt } from \"../../libs/math\"\nimport { formatAsset } from \"../../libs/parse\"\nimport getLpName from \"../../libs/getLpName\"\nimport Card from \"../../components/Card\"\nimport Table from \"../../components/Table\"\nimport Delisted from \"../../components/Delisted\"\nimport DashboardActions from \"../../components/DashboardActions\"\nimport { useListedAssets } from \"../../database/assets\"\nimport { useAssetsBalances } from \"../../database/balances\"\nimport { rewardsQuery } from \"../../database/rewards\"\nimport { getUniswapLinksQuery } from \"../../database/uniswap\"\n\nconst Stake = () => {\n  const listedAll = useListedAssets(\"all\")\n  const stakableBalances = useAssetsBalances(\"lp\")\n  const stakedBalances = useAssetsBalances(\"pool\")\n  const rewards = useRecoilValue(rewardsQuery)\n  const getUniswapLinks = useRecoilValue(getUniswapLinksQuery)\n  const data = [stakableBalances, stakedBalances, rewards]\n\n  const loading = data.some((balances) =>\n    Object.values(balances).some(({ state }) => state !== \"hasValue\")\n  )\n\n  const dataSource = listedAll\n    .filter(({ token }) =>\n      data.some((balances) => gt(balances[token].contents as string, 0))\n    )\n    .map((item) => {\n      const { token } = item\n      return {\n        ...item,\n        stakable: stakableBalances[token].contents,\n        staked: stakedBalances[token].contents,\n        reward: rewards[token].contents,\n      }\n    })\n\n  const empty = !loading && !dataSource.length\n\n  return (\n    <Card title=\"Stake\" loading={loading}>\n      {empty ? (\n        <p>No data</p>\n      ) : (\n        <Table\n          columns={[\n            {\n              key: \"symbol\",\n              title: \"Pool Name\",\n              render: (symbol, { status }) => (\n                <>\n                  {status === \"DELISTED\" && <Delisted />}\n                  {getLpName(symbol)}\n                </>\n              ),\n              bold: true,\n            },\n            {\n              key: \"staked\",\n              render: (value) => formatAsset(value, \"LP\"),\n              align: \"right\",\n            },\n            {\n              key: \"stakable\",\n              render: (value) => formatAsset(value, \"LP\"),\n              align: \"right\",\n            },\n            {\n              key: \"reward\",\n              render: (value) => formatAsset(value, \"MIR\"),\n              align: \"right\",\n            },\n            {\n              key: \"actions\",\n              dataIndex: \"token\",\n              render: (token) => {\n                const path = `/stake/${token}`\n                const { remove } = getUniswapLinks(token)\n                const list = [\n                  { to: `${path}#stake`, children: \"Stake\" },\n                  { to: `${path}#unstake`, children: \"Unstake\" },\n                  { to: `/claim/${token}`, children: \"Claim\" },\n                  { href: remove, children: \"Remove liquidity\" },\n                ]\n\n                return <DashboardActions list={list} />\n              },\n              align: \"right\",\n              fixed: \"right\",\n            },\n          ]}\n          dataSource={dataSource}\n        />\n      )}\n    </Card>\n  )\n}\n\nexport default Stake\n"]},"metadata":{},"sourceType":"module"}