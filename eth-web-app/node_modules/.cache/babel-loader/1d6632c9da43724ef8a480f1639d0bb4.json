{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StdSignMsg = void 0;\n\nvar StdFee_1 = require(\"./StdFee\");\n\nvar Msg_1 = require(\"./Msg\");\n\nvar json_1 = require(\"../util/json\");\n\nvar StdTx_1 = require(\"./StdTx\");\n/**\n * A sign message is a data structure that is used to create a [[StdSignature]] to be later\n * appended to the list of signatures in an [[StdTx]]. Essentially, it contains all the\n * information needed to sign and build a transaction, and can be described as an\n * \"unsigned transaction.\"\n */\n\n\nvar StdSignMsg =\n/** @class */\nfunction (_super) {\n  __extends(StdSignMsg, _super);\n  /**\n   *\n   * @param chain_id ID of blockchain to submit transaction to\n   * @param account_number account number on blockchain\n   * @param sequence Sequence number (nonce), number of signed previous transactions by\n   *    account included on the blockchain at time of broadcast.\n   * @param fee transaction fee\n   * @param msgs list of messages to include\n   * @param memo optional note\n   */\n\n\n  function StdSignMsg(chain_id, account_number, sequence, fee, msgs, memo) {\n    if (memo === void 0) {\n      memo = '';\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.chain_id = chain_id;\n    _this.account_number = account_number;\n    _this.sequence = sequence;\n    _this.fee = fee;\n    _this.msgs = msgs;\n    _this.memo = memo;\n    return _this;\n  }\n\n  StdSignMsg.prototype.toData = function () {\n    var _a = this,\n        chain_id = _a.chain_id,\n        account_number = _a.account_number,\n        sequence = _a.sequence,\n        fee = _a.fee,\n        msgs = _a.msgs,\n        memo = _a.memo;\n\n    return {\n      chain_id: chain_id,\n      account_number: account_number.toString(),\n      sequence: sequence.toString(),\n      fee: fee.toData(),\n      msgs: msgs.map(function (m) {\n        return m.toData();\n      }),\n      memo: memo\n    };\n  };\n\n  StdSignMsg.fromData = function (data) {\n    var chain_id = data.chain_id,\n        account_number = data.account_number,\n        sequence = data.sequence,\n        fee = data.fee,\n        msgs = data.msgs,\n        memo = data.memo;\n    return new StdSignMsg(chain_id, Number.parseInt(account_number), Number.parseInt(sequence), StdFee_1.StdFee.fromData(fee), msgs.map(function (m) {\n      return Msg_1.Msg.fromData(m);\n    }), memo);\n  };\n  /**\n   * You get get the [[StdTx]] value from a `StdSignMsg` (without the signature).\n   */\n\n\n  StdSignMsg.prototype.toStdTx = function () {\n    var _a = this,\n        fee = _a.fee,\n        msgs = _a.msgs,\n        memo = _a.memo;\n\n    return new StdTx_1.StdTx(msgs, fee, [], memo);\n  };\n\n  return StdSignMsg;\n}(json_1.JSONSerializable);\n\nexports.StdSignMsg = StdSignMsg;","map":{"version":3,"sources":["../../src/core/StdSignMsg.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StdSignMsg = void 0;\nvar StdFee_1 = require(\"./StdFee\");\nvar Msg_1 = require(\"./Msg\");\nvar json_1 = require(\"../util/json\");\nvar StdTx_1 = require(\"./StdTx\");\n/**\n * A sign message is a data structure that is used to create a [[StdSignature]] to be later\n * appended to the list of signatures in an [[StdTx]]. Essentially, it contains all the\n * information needed to sign and build a transaction, and can be described as an\n * \"unsigned transaction.\"\n */\nvar StdSignMsg = /** @class */ (function (_super) {\n    __extends(StdSignMsg, _super);\n    /**\n     *\n     * @param chain_id ID of blockchain to submit transaction to\n     * @param account_number account number on blockchain\n     * @param sequence Sequence number (nonce), number of signed previous transactions by\n     *    account included on the blockchain at time of broadcast.\n     * @param fee transaction fee\n     * @param msgs list of messages to include\n     * @param memo optional note\n     */\n    function StdSignMsg(chain_id, account_number, sequence, fee, msgs, memo) {\n        if (memo === void 0) { memo = ''; }\n        var _this = _super.call(this) || this;\n        _this.chain_id = chain_id;\n        _this.account_number = account_number;\n        _this.sequence = sequence;\n        _this.fee = fee;\n        _this.msgs = msgs;\n        _this.memo = memo;\n        return _this;\n    }\n    StdSignMsg.prototype.toData = function () {\n        var _a = this, chain_id = _a.chain_id, account_number = _a.account_number, sequence = _a.sequence, fee = _a.fee, msgs = _a.msgs, memo = _a.memo;\n        return {\n            chain_id: chain_id,\n            account_number: account_number.toString(),\n            sequence: sequence.toString(),\n            fee: fee.toData(),\n            msgs: msgs.map(function (m) { return m.toData(); }),\n            memo: memo,\n        };\n    };\n    StdSignMsg.fromData = function (data) {\n        var chain_id = data.chain_id, account_number = data.account_number, sequence = data.sequence, fee = data.fee, msgs = data.msgs, memo = data.memo;\n        return new StdSignMsg(chain_id, Number.parseInt(account_number), Number.parseInt(sequence), StdFee_1.StdFee.fromData(fee), msgs.map(function (m) { return Msg_1.Msg.fromData(m); }), memo);\n    };\n    /**\n     * You get get the [[StdTx]] value from a `StdSignMsg` (without the signature).\n     */\n    StdSignMsg.prototype.toStdTx = function () {\n        var _a = this, fee = _a.fee, msgs = _a.msgs, memo = _a.memo;\n        return new StdTx_1.StdTx(msgs, fee, [], memo);\n    };\n    return StdSignMsg;\n}(json_1.JSONSerializable));\nexports.StdSignMsg = StdSignMsg;\n//# sourceMappingURL=StdSignMsg.js.map"]},"metadata":{},"sourceType":"script"}