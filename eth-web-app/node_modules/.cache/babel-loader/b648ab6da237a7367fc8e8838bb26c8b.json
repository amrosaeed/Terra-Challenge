{"ast":null,"code":"import _regeneratorRuntime from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useRef,useState,useEffect}from\"react\";import{useRecoilState,useSetRecoilState}from\"recoil\";import{ethers}from\"ethers\";import MetaMaskOnboarding from\"@metamask/onboarding\";import{addressState,providerState}from\"../database/atoms\";var ButtonText;(function(ButtonText){ButtonText[\"ONBOARD\"]=\"Install MetaMask\";ButtonText[\"CONNECT\"]=\"Connect\";ButtonText[\"CONNECTED\"]=\"Connected\";})(ButtonText||(ButtonText={}));if(window.ethereum){window.ethereum.autoRefreshOnNetworkChange=false;}var useOnboard=function useOnboard(){var onboarding=useRef();var _useState=useState(ButtonText.ONBOARD),_useState2=_slicedToArray(_useState,2),buttonText=_useState2[0],setButtonText=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),disabled=_useState4[0],setDisabled=_useState4[1];var _useRecoilState=useRecoilState(addressState),_useRecoilState2=_slicedToArray(_useRecoilState,2),account=_useRecoilState2[0],setAccount=_useRecoilState2[1];var setProvider=useSetRecoilState(providerState);useEffect(function(){if(!onboarding.current){onboarding.current=new MetaMaskOnboarding();}},[]);useEffect(function(){if(MetaMaskOnboarding.isMetaMaskInstalled()){if(account){var _onboarding$current;setButtonText(ButtonText.CONNECTED);setDisabled(true);(_onboarding$current=onboarding.current)===null||_onboarding$current===void 0?void 0:_onboarding$current.stopOnboarding();}else{setButtonText(ButtonText.CONNECT);setDisabled(false);}}},[account]);var onClick=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window$ethereum,method,accounts,_onboarding$current2;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!MetaMaskOnboarding.isMetaMaskInstalled()){_context.next=9;break;}method=\"eth_requestAccounts\";_context.next=4;return(_window$ethereum=window.ethereum)===null||_window$ethereum===void 0?void 0:_window$ethereum.request({method:method});case 4:accounts=_context.sent;accounts&&setAccount(accounts[0]);setProvider(new ethers.providers.Web3Provider(window.ethereum));_context.next=10;break;case 9:(_onboarding$current2=onboarding.current)===null||_onboarding$current2===void 0?void 0:_onboarding$current2.startOnboarding();case 10:case\"end\":return _context.stop();}}},_callee);}));return function onClick(){return _ref.apply(this,arguments);};}();return{children:buttonText,disabled:disabled,onClick:onClick};};export default useOnboard;","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/ethereum/useOnboard.ts"],"names":["useRef","useState","useEffect","useRecoilState","useSetRecoilState","ethers","MetaMaskOnboarding","addressState","providerState","ButtonText","window","ethereum","autoRefreshOnNetworkChange","useOnboard","onboarding","ONBOARD","buttonText","setButtonText","disabled","setDisabled","account","setAccount","setProvider","current","isMetaMaskInstalled","CONNECTED","stopOnboarding","CONNECT","onClick","method","request","accounts","providers","Web3Provider","startOnboarding","children"],"mappings":"idAAA,OAASA,MAAT,CAAiBC,QAAjB,CAA2BC,SAA3B,KAA4C,OAA5C,CACA,OAASC,cAAT,CAAyBC,iBAAzB,KAAkD,QAAlD,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,MAAOC,CAAAA,kBAAP,KAA+B,sBAA/B,CACA,OAASC,YAAT,CAAuBC,aAAvB,KAA4C,mBAA5C,C,GAEKC,CAAAA,U,WAAAA,U,EAAAA,U,+BAAAA,U,sBAAAA,U,6BAAAA,U,GAAAA,U,MAML,GAAIC,MAAM,CAACC,QAAX,CAAqB,CACnBD,MAAM,CAACC,QAAP,CAAgBC,0BAAhB,CAA6C,KAA7C,CACD,CAED,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB,GAAMC,CAAAA,UAAU,CAAGd,MAAM,EAAzB,CADuB,cAGaC,QAAQ,CAAaQ,UAAU,CAACM,OAAxB,CAHrB,wCAGhBC,UAHgB,eAGJC,aAHI,8BAIShB,QAAQ,CAAC,KAAD,CAJjB,yCAIhBiB,QAJgB,eAINC,WAJM,mCAKOhB,cAAc,CAACI,YAAD,CALrB,oDAKhBa,OALgB,qBAKPC,UALO,qBAMvB,GAAMC,CAAAA,WAAW,CAAGlB,iBAAiB,CAACI,aAAD,CAArC,CAEAN,SAAS,CAAC,UAAM,CACd,GAAI,CAACY,UAAU,CAACS,OAAhB,CAAyB,CACvBT,UAAU,CAACS,OAAX,CAAqB,GAAIjB,CAAAA,kBAAJ,EAArB,CACD,CACF,CAJQ,CAIN,EAJM,CAAT,CAMAJ,SAAS,CAAC,UAAM,CACd,GAAII,kBAAkB,CAACkB,mBAAnB,EAAJ,CAA8C,CAC5C,GAAIJ,OAAJ,CAAa,yBACXH,aAAa,CAACR,UAAU,CAACgB,SAAZ,CAAb,CACAN,WAAW,CAAC,IAAD,CAAX,CACA,qBAAAL,UAAU,CAACS,OAAX,kEAAoBG,cAApB,GACD,CAJD,IAIO,CACLT,aAAa,CAACR,UAAU,CAACkB,OAAZ,CAAb,CACAR,WAAW,CAAC,KAAD,CAAX,CACD,CACF,CACF,CAXQ,CAWN,CAACC,OAAD,CAXM,CAAT,CAaA,GAAMQ,CAAAA,OAAO,0FAAG,iMACVtB,kBAAkB,CAACkB,mBAAnB,EADU,yBAENK,MAFM,CAEG,qBAFH,yCAGWnB,MAAM,CAACC,QAHlB,2CAGW,iBAAiBmB,OAAjB,CAAyB,CAAED,MAAM,CAANA,MAAF,CAAzB,CAHX,QAGNE,QAHM,eAIZA,QAAQ,EAAIV,UAAU,CAACU,QAAQ,CAAC,CAAD,CAAT,CAAtB,CACAT,WAAW,CAAC,GAAIjB,CAAAA,MAAM,CAAC2B,SAAP,CAAiBC,YAArB,CAAkCvB,MAAM,CAACC,QAAzC,CAAD,CAAX,CALY,8BAOZ,sBAAAG,UAAU,CAACS,OAAX,oEAAoBW,eAApB,GAPY,uDAAH,kBAAPN,CAAAA,OAAO,0CAAb,CAWA,MAAO,CAAEO,QAAQ,CAAEnB,UAAZ,CAAwBE,QAAQ,CAARA,QAAxB,CAAkCU,OAAO,CAAPA,OAAlC,CAAP,CACD,CAvCD,CAyCA,cAAef,CAAAA,UAAf","sourcesContent":["import { useRef, useState, useEffect } from \"react\"\nimport { useRecoilState, useSetRecoilState } from \"recoil\"\nimport { ethers } from \"ethers\"\nimport MetaMaskOnboarding from \"@metamask/onboarding\"\nimport { addressState, providerState } from \"../database/atoms\"\n\nenum ButtonText {\n  ONBOARD = \"Install MetaMask\",\n  CONNECT = \"Connect\",\n  CONNECTED = \"Connected\",\n}\n\nif (window.ethereum) {\n  window.ethereum.autoRefreshOnNetworkChange = false\n}\n\nconst useOnboard = () => {\n  const onboarding = useRef<MetaMaskOnboarding>()\n\n  const [buttonText, setButtonText] = useState<ButtonText>(ButtonText.ONBOARD)\n  const [disabled, setDisabled] = useState(false)\n  const [account, setAccount] = useRecoilState(addressState)\n  const setProvider = useSetRecoilState(providerState)\n\n  useEffect(() => {\n    if (!onboarding.current) {\n      onboarding.current = new MetaMaskOnboarding()\n    }\n  }, [])\n\n  useEffect(() => {\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n      if (account) {\n        setButtonText(ButtonText.CONNECTED)\n        setDisabled(true)\n        onboarding.current?.stopOnboarding()\n      } else {\n        setButtonText(ButtonText.CONNECT)\n        setDisabled(false)\n      }\n    }\n  }, [account])\n\n  const onClick = async () => {\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n      const method = \"eth_requestAccounts\"\n      const accounts = await window.ethereum?.request({ method })\n      accounts && setAccount(accounts[0])\n      setProvider(new ethers.providers.Web3Provider(window.ethereum))\n    } else {\n      onboarding.current?.startOnboarding()\n    }\n  }\n\n  return { children: buttonText, disabled, onClick }\n}\n\nexport default useOnboard\n"]},"metadata":{},"sourceType":"module"}