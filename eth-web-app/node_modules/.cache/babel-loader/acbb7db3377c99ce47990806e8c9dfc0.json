{"ast":null,"code":"import _regeneratorRuntime from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useSetRecoilState}from\"recoil\";import{ethers}from\"ethers\";import WalletConnectProvider from\"@walletconnect/web3-provider\";import{addressState,infuraId,providerState}from\"../database/atoms\";var useWalletConnect=function useWalletConnect(){var setProvider=useSetRecoilState(providerState);var setAddress=useSetRecoilState(addressState);var onClick=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var provider,_yield$provider$enabl,_yield$provider$enabl2,address;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:provider=new WalletConnectProvider({infuraId:infuraId});_context.next=3;return provider.enable();case 3:_yield$provider$enabl=_context.sent;_yield$provider$enabl2=_slicedToArray(_yield$provider$enabl,1);address=_yield$provider$enabl2[0];setAddress(address);setProvider(new ethers.providers.Web3Provider(provider));case 8:case\"end\":return _context.stop();}}},_callee);}));return function onClick(){return _ref.apply(this,arguments);};}();return{onClick:onClick};};export default useWalletConnect;","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/layouts/useWalletConnect.tsx"],"names":["useSetRecoilState","ethers","WalletConnectProvider","addressState","infuraId","providerState","useWalletConnect","setProvider","setAddress","onClick","provider","enable","address","providers","Web3Provider"],"mappings":"idAAA,OAASA,iBAAT,KAAkC,QAAlC,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,MAAOC,CAAAA,qBAAP,KAAkC,8BAAlC,CACA,OAASC,YAAT,CAAuBC,QAAvB,CAAiCC,aAAjC,KAAsD,mBAAtD,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC7B,GAAMC,CAAAA,WAAW,CAAGP,iBAAiB,CAACK,aAAD,CAArC,CACA,GAAMG,CAAAA,UAAU,CAAGR,iBAAiB,CAACG,YAAD,CAApC,CAEA,GAAMM,CAAAA,OAAO,0FAAG,qMACRC,QADQ,CACG,GAAIR,CAAAA,qBAAJ,CAA0B,CAAEE,QAAQ,CAARA,QAAF,CAA1B,CADH,uBAEUM,CAAAA,QAAQ,CAACC,MAAT,EAFV,2GAEPC,OAFO,2BAGdJ,UAAU,CAACI,OAAD,CAAV,CACAL,WAAW,CAAC,GAAIN,CAAAA,MAAM,CAACY,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAD,CAAX,CAJc,sDAAH,kBAAPD,CAAAA,OAAO,0CAAb,CAOA,MAAO,CAAEA,OAAO,CAAPA,OAAF,CAAP,CACD,CAZD,CAcA,cAAeH,CAAAA,gBAAf","sourcesContent":["import { useSetRecoilState } from \"recoil\"\nimport { ethers } from \"ethers\"\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"\nimport { addressState, infuraId, providerState } from \"../database/atoms\"\n\nconst useWalletConnect = () => {\n  const setProvider = useSetRecoilState(providerState)\n  const setAddress = useSetRecoilState(addressState)\n\n  const onClick = async () => {\n    const provider = new WalletConnectProvider({ infuraId })\n    const [address] = await provider.enable()\n    setAddress(address)\n    setProvider(new ethers.providers.Web3Provider(provider))\n  }\n\n  return { onClick }\n}\n\nexport default useWalletConnect\n"]},"metadata":{},"sourceType":"module"}