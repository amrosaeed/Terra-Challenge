{"ast":null,"code":"import _regeneratorRuntime from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{selector}from\"recoil\";import{ethers}from\"ethers\";import{div,plus,times}from\"../libs/math\";import fetcher from\"../ethereum/fetcher.json\";import{dictWithFn,integer}from\"./dbUtils\";import*as calc from\"./calc\";import{providerState}from\"./atoms\";import{networkNameQuery}from\"./network\";import{assetsQuery,listedAssetsQuery}from\"./assets\";import{itemBySymbolQuery}from\"./asset\";export var helperContractQuery=selector({key:\"helperContract\",get:function get(_ref){var _get=_ref.get;var provider=_get(providerState);var name=_get(networkNameQuery);var helpers={homestead:\"0xF497145AD68ed6aDFA981c21e5bCdE949d0C3935\",ropsten:\"0xc08e82786a62f27382ebE0a518533Fb4Fd91dC81\"};var helper=helpers[name];var abi=fetcher.InfoFetcher.abi;var contract=new ethers.Contract(helper,abi,provider);return contract;},dangerouslyAllowMutability:true});export var pairInfoQuery=selector({key:\"pairInfo\",get:function(){var _get3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2){var _get2,contract,contracts,pairInfo,parse;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_get2=_ref2.get;contract=_get2(helperContractQuery);contracts=_get2(listedAssetsQuery(\"all\")).map(function(_ref3){var token=_ref3.token;return token;});_context.next=5;return contract.fetchPairInfo(contracts);case 5:pairInfo=_context.sent;parse=function parse(item){var _item=_slicedToArray(item,7),$lpSupply=_item[1],ustReserve=_item[3],assetReserve=_item[6];var lpSupply=integer($lpSupply.toString());var ust=integer(ustReserve.toString());var asset=integer(assetReserve.toString());var price=div(ust,asset);var total=plus(ust,times(asset,price));return{lpSupply:lpSupply,ust:ust,asset:asset,price:price,total:total};};return _context.abrupt(\"return\",pairInfo.reduce(function(acc,cur,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},contracts[index],parse(cur)));},{}));case 8:case\"end\":return _context.stop();}}},_callee);}));function get(_x){return _get3.apply(this,arguments);}return get;}()});export var poolInfoQuery=selector({key:\"poolInfo\",get:function(){var _get5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref4){var _get4,contract,tokens,contracts,poolInfo,parse;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_get4=_ref4.get;contract=_get4(helperContractQuery);tokens=_get4(listedAssetsQuery(\"all\")).map(function(_ref5){var token=_ref5.token;return token;});contracts=_get4(listedAssetsQuery(\"all\")).map(function(_ref6){var pool=_ref6.pool;return pool;});_context2.next=6;return contract.fetchPoolInfo(contracts);case 6:poolInfo=_context2.sent;parse=function parse(item){var _item2=_slicedToArray(item,3),lpStaked=_item2[1],rewardRemains=_item2[2];return{lpStaked:integer(lpStaked.toString()),rewardRemains:integer(rewardRemains.toString())};};return _context2.abrupt(\"return\",poolInfo.reduce(function(acc,cur,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},tokens[index],parse(cur)));},{}));case 9:case\"end\":return _context2.stop();}}},_callee2);}));function get(_x2){return _get5.apply(this,arguments);}return get;}()});export var infoQuery=selector({key:\"info\",get:function get(_ref7){var _get6=_ref7.get;var assets=_get6(assetsQuery);var pairInfo=_get6(pairInfoQuery);var poolInfo=_get6(poolInfoQuery);var _ref8=_get6(itemBySymbolQuery(\"MIR\")),mir=_ref8.token;var getInfo=function getInfo(item){var token=item.token,symbol=item.symbol;var MIRPrice=pairInfo[mir].price;var tokenPair=pairInfo[token];var tokenPool=poolInfo[token];var liquidityValue=tokenPair.total,totalLpShare=tokenPair.lpSupply;var stakedLpShare=tokenPool.lpStaked;/* apr */var MIRAnnualRewards=String(calc.getMIRAnnualRewards(Date.now(),token===mir));var params={MIRAnnualRewards:MIRAnnualRewards,MIRPrice:MIRPrice,liquidityValue:liquidityValue,stakedLpShare:stakedLpShare,totalLpShare:totalLpShare};var apr=calc.apr(params);var log=_objectSpread({symbol:symbol},params);return _objectSpread(_objectSpread(_objectSpread(_objectSpread({},item),tokenPair),tokenPool),{},{apr:apr,log:log});};return dictWithFn(assets,getInfo);}});","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/database/info.ts"],"names":["selector","ethers","div","plus","times","fetcher","dictWithFn","integer","calc","providerState","networkNameQuery","assetsQuery","listedAssetsQuery","itemBySymbolQuery","helperContractQuery","key","get","provider","name","helpers","homestead","ropsten","helper","abi","InfoFetcher","contract","Contract","dangerouslyAllowMutability","pairInfoQuery","contracts","map","token","fetchPairInfo","pairInfo","parse","item","$lpSupply","ustReserve","assetReserve","lpSupply","toString","ust","asset","price","total","reduce","acc","cur","index","poolInfoQuery","tokens","pool","fetchPoolInfo","poolInfo","lpStaked","rewardRemains","infoQuery","assets","mir","getInfo","symbol","MIRPrice","tokenPair","tokenPool","liquidityValue","totalLpShare","stakedLpShare","MIRAnnualRewards","String","getMIRAnnualRewards","Date","now","params","apr","log"],"mappings":"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","sourcesContent":["import { selector } from \"recoil\"\nimport { Dictionary } from \"ramda\"\nimport { ethers } from \"ethers\"\nimport { div, plus, times } from \"../libs/math\"\nimport fetcher from \"../ethereum/fetcher.json\"\nimport { dictWithFn, integer } from \"./dbUtils\"\nimport * as calc from \"./calc\"\nimport { providerState } from \"./atoms\"\nimport { networkNameQuery } from \"./network\"\nimport { assetsQuery, listedAssetsQuery } from \"./assets\"\nimport { itemBySymbolQuery } from \"./asset\"\n\nexport const helperContractQuery = selector({\n  key: \"helperContract\",\n  get: ({ get }) => {\n    const provider = get(providerState)\n    const name = get(networkNameQuery)\n    const helpers: Dictionary<string> = {\n      homestead: \"0xF497145AD68ed6aDFA981c21e5bCdE949d0C3935\",\n      ropsten: \"0xc08e82786a62f27382ebE0a518533Fb4Fd91dC81\",\n    }\n\n    const helper = helpers[name]\n    const { abi } = fetcher.InfoFetcher\n    const contract = new ethers.Contract(helper, abi, provider)\n\n    return contract\n  },\n  dangerouslyAllowMutability: true,\n})\n\ntype PairInfoData = [\n  string, // pair lpToken\n  ethers.BigNumber, // pair lpSupply\n  string, // ust\n  ethers.BigNumber, // ustReserve\n  string, // asset\n  string, // assetSymbol\n  ethers.BigNumber // assetReserve\n]\n\nexport const pairInfoQuery = selector({\n  key: \"pairInfo\",\n  get: async ({ get }) => {\n    const contract = get(helperContractQuery)\n    const contracts = get(listedAssetsQuery(\"all\")).map(({ token }) => token)\n    const pairInfo: PairInfoData[] = await contract.fetchPairInfo(contracts)\n\n    const parse = (item: PairInfoData) => {\n      const [, $lpSupply, , ustReserve, , , assetReserve] = item\n\n      const lpSupply = integer($lpSupply.toString())\n      const ust = integer(ustReserve.toString())\n      const asset = integer(assetReserve.toString())\n      const price = div(ust, asset)\n      const total = plus(ust, times(asset, price))\n\n      return { lpSupply, ust, asset, price, total }\n    }\n\n    return pairInfo.reduce<Dictionary<PairInfo>>(\n      (acc, cur, index) => ({ ...acc, [contracts[index]]: parse(cur) }),\n      {} as Dictionary<PairInfo>\n    )\n  },\n})\n\ntype PoolInfoData = [\n  string, // lpToken\n  ethers.BigNumber, // lpStaked\n  ethers.BigNumber // rewardRemains\n]\n\nexport const poolInfoQuery = selector({\n  key: \"poolInfo\",\n  get: async ({ get }) => {\n    const contract = get(helperContractQuery)\n    const tokens = get(listedAssetsQuery(\"all\")).map(({ token }) => token)\n    const contracts = get(listedAssetsQuery(\"all\")).map(({ pool }) => pool)\n    const poolInfo: PoolInfoData[] = await contract.fetchPoolInfo(contracts)\n\n    const parse = (item: PoolInfoData) => {\n      const [, lpStaked, rewardRemains] = item\n\n      return {\n        lpStaked: integer(lpStaked.toString()),\n        rewardRemains: integer(rewardRemains.toString()),\n      }\n    }\n\n    return poolInfo.reduce<Dictionary<PoolInfo>>(\n      (acc, cur, index) => ({ ...acc, [tokens[index]]: parse(cur) }),\n      {} as Dictionary<PoolInfo>\n    )\n  },\n})\n\nexport const infoQuery = selector({\n  key: \"info\",\n  get: ({ get }) => {\n    const assets = get(assetsQuery)\n    const pairInfo = get(pairInfoQuery)\n    const poolInfo = get(poolInfoQuery)\n    const { token: mir } = get(itemBySymbolQuery(\"MIR\"))!\n\n    const getInfo = (item: ListedAsset) => {\n      const { token, symbol } = item\n      const { price: MIRPrice } = pairInfo[mir]\n      const tokenPair = pairInfo[token]\n      const tokenPool = poolInfo[token]\n      const { total: liquidityValue, lpSupply: totalLpShare } = tokenPair\n      const { lpStaked: stakedLpShare } = tokenPool\n\n      /* apr */\n      const MIRAnnualRewards = String(\n        calc.getMIRAnnualRewards(Date.now(), token === mir)\n      )\n\n      const params = {\n        MIRAnnualRewards,\n        MIRPrice,\n        liquidityValue,\n        stakedLpShare,\n        totalLpShare,\n      }\n\n      const apr = calc.apr(params)\n      const log = { symbol, ...params }\n      return { ...item, ...tokenPair, ...tokenPool, apr, log }\n    }\n\n    return dictWithFn(assets, getInfo)\n  },\n})\n"]},"metadata":{},"sourceType":"module"}