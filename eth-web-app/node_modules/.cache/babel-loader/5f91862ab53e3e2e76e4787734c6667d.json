{"ast":null,"code":"import{selectorFamily,useRecoilValue}from\"recoil\";import{ethers}from\"ethers\";import abi from\"../ethereum/abi.json\";import{providerState}from\"./atoms\";export var contractQuery=selectorFamily({key:\"contract\",get:function get(token){return function(_ref){var get=_ref.get;try{var provider=get(providerState);// if token is empty, error occurs\nreturn token?new ethers.Contract(token,abi,provider):undefined;}catch(_unused){return;}};},dangerouslyAllowMutability:true});export var useContract=function useContract(token){var value=useRecoilValue(contractQuery(token));return value;};","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/database/contract.ts"],"names":["selectorFamily","useRecoilValue","ethers","abi","providerState","contractQuery","key","get","token","provider","Contract","undefined","dangerouslyAllowMutability","useContract","value"],"mappings":"AAAA,OAASA,cAAT,CAAyBC,cAAzB,KAA+C,QAA/C,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,MAAOC,CAAAA,GAAP,KAAgB,sBAAhB,CACA,OAASC,aAAT,KAA8B,SAA9B,CAEA,MAAO,IAAMC,CAAAA,aAAa,CAAGL,cAAc,CAAC,CAC1CM,GAAG,CAAE,UADqC,CAE1CC,GAAG,CAAE,aAACC,KAAD,QAAmB,eAAa,IAAVD,CAAAA,GAAU,MAAVA,GAAU,CACnC,GAAI,CACF,GAAME,CAAAA,QAAQ,CAAGF,GAAG,CAACH,aAAD,CAApB,CACA;AACA,MAAOI,CAAAA,KAAK,CAAG,GAAIN,CAAAA,MAAM,CAACQ,QAAX,CAAoBF,KAApB,CAA2BL,GAA3B,CAAgCM,QAAhC,CAAH,CAA+CE,SAA3D,CACD,CAAC,cAAM,CACN,OACD,CACF,CARI,EAFqC,CAW1CC,0BAA0B,CAAE,IAXc,CAAD,CAApC,CAcP,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACL,KAAD,CAAmB,CAC5C,GAAMM,CAAAA,KAAK,CAAGb,cAAc,CAACI,aAAa,CAACG,KAAD,CAAd,CAA5B,CACA,MAAOM,CAAAA,KAAP,CACD,CAHM","sourcesContent":["import { selectorFamily, useRecoilValue } from \"recoil\"\nimport { ethers } from \"ethers\"\nimport abi from \"../ethereum/abi.json\"\nimport { providerState } from \"./atoms\"\n\nexport const contractQuery = selectorFamily({\n  key: \"contract\",\n  get: (token: string) => ({ get }) => {\n    try {\n      const provider = get(providerState)\n      // if token is empty, error occurs\n      return token ? new ethers.Contract(token, abi, provider) : undefined\n    } catch {\n      return\n    }\n  },\n  dangerouslyAllowMutability: true,\n})\n\nexport const useContract = (token: string) => {\n  const value = useRecoilValue(contractQuery(token))\n  return value\n}\n"]},"metadata":{},"sourceType":"module"}