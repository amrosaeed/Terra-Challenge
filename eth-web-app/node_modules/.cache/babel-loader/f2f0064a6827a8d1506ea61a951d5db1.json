{"ast":null,"code":"import _objectSpread from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{jsx as _jsx}from\"react/jsx-runtime\";import{useRecoilValue}from\"recoil\";import{useRouteMatch}from\"react-router-dom\";import{formatAsset}from\"../libs/parse\";import{useAsset}from\"../database/asset\";import{useContract}from\"../database/contract\";import{rewardQuery}from\"../database/rewards\";import FormContainer from\"./FormContainer\";var Claim=function Claim(){/* context */var _useRouteMatch=useRouteMatch(),params=_useRouteMatch.params;var token=params.token;var _useAsset=useAsset(token),pool=_useAsset.pool;var reward=useRecoilValue(rewardQuery(token));/* confirm */var contents=[{title:\"Claiming\",content:formatAsset(reward,\"MIR\")}];/* submit */var contract=useContract(pool);var tx=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(signer){var withSigner,_yield$withSigner$get,hash;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:withSigner=contract.connect(signer);_context.next=3;return withSigner.getReward();case 3:_yield$withSigner$get=_context.sent;hash=_yield$withSigner$get.hash;return _context.abrupt(\"return\",hash);case 6:case\"end\":return _context.stop();}}},_callee);}));return function tx(_x){return _ref.apply(this,arguments);};}();var tab={tabs:[\"Claim\"],current:\"Claim\"};var container={tab:tab,contents:contents,tx:tx};return/*#__PURE__*/_jsx(FormContainer,_objectSpread({},container));};export default Claim;","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/forms/ClaimForm.tsx"],"names":["useRecoilValue","useRouteMatch","formatAsset","useAsset","useContract","rewardQuery","FormContainer","Claim","params","token","pool","reward","contents","title","content","contract","tx","signer","withSigner","connect","getReward","hash","tab","tabs","current","container"],"mappings":"2fAAA,OAASA,cAAT,KAA+B,QAA/B,CACA,OAASC,aAAT,KAA8B,kBAA9B,CAGA,OAASC,WAAT,KAA4B,eAA5B,CACA,OAASC,QAAT,KAAyB,mBAAzB,CACA,OAASC,WAAT,KAA4B,sBAA5B,CACA,OAASC,WAAT,KAA4B,qBAA5B,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,CAClB,aADkB,mBAECN,aAAa,EAFd,CAEVO,MAFU,gBAEVA,MAFU,IAGVC,CAAAA,KAHU,CAGAD,MAHA,CAGVC,KAHU,eAIDN,QAAQ,CAACM,KAAD,CAJP,CAIVC,IAJU,WAIVA,IAJU,CAKlB,GAAMC,CAAAA,MAAM,CAAGX,cAAc,CAACK,WAAW,CAACI,KAAD,CAAZ,CAA7B,CAEA,aACA,GAAMG,CAAAA,QAAQ,CAAG,CAAC,CAAEC,KAAK,CAAE,UAAT,CAAqBC,OAAO,CAAEZ,WAAW,CAACS,MAAD,CAAS,KAAT,CAAzC,CAAD,CAAjB,CAEA,YACA,GAAMI,CAAAA,QAAQ,CAAGX,WAAW,CAACM,IAAD,CAA5B,CACA,GAAMM,CAAAA,EAAE,0FAAG,iBAAOC,MAAP,4JACHC,UADG,CACUH,QAAQ,CAAEI,OAAV,CAAkBF,MAAlB,CADV,uBAEcC,CAAAA,UAAU,CAACE,SAAX,EAFd,4CAEDC,IAFC,uBAEDA,IAFC,iCAGFA,IAHE,wDAAH,kBAAFL,CAAAA,EAAE,4CAAR,CAMA,GAAMM,CAAAA,GAAG,CAAG,CAAEC,IAAI,CAAE,CAAC,OAAD,CAAR,CAAmBC,OAAO,CAAE,OAA5B,CAAZ,CACA,GAAMC,CAAAA,SAAS,CAAG,CAAEH,GAAG,CAAHA,GAAF,CAAOV,QAAQ,CAARA,QAAP,CAAiBI,EAAE,CAAFA,EAAjB,CAAlB,CAEA,mBAAO,KAAC,aAAD,kBAAmBS,SAAnB,EAAP,CACD,CAtBD,CAwBA,cAAelB,CAAAA,KAAf","sourcesContent":["import { useRecoilValue } from \"recoil\"\nimport { useRouteMatch } from \"react-router-dom\"\nimport { ethers } from \"ethers\"\n\nimport { formatAsset } from \"../libs/parse\"\nimport { useAsset } from \"../database/asset\"\nimport { useContract } from \"../database/contract\"\nimport { rewardQuery } from \"../database/rewards\"\nimport FormContainer from \"./FormContainer\"\n\nconst Claim = () => {\n  /* context */\n  const { params } = useRouteMatch<{ token: string }>()\n  const { token } = params\n  const { pool } = useAsset(token)\n  const reward = useRecoilValue(rewardQuery(token))\n\n  /* confirm */\n  const contents = [{ title: \"Claiming\", content: formatAsset(reward, \"MIR\") }]\n\n  /* submit */\n  const contract = useContract(pool)\n  const tx = async (signer: ethers.providers.JsonRpcSigner) => {\n    const withSigner = contract!.connect(signer)\n    const { hash } = await withSigner.getReward()\n    return hash\n  }\n\n  const tab = { tabs: [\"Claim\"], current: \"Claim\" }\n  const container = { tab, contents, tx }\n\n  return <FormContainer {...container} />\n}\n\nexport default Claim\n"]},"metadata":{},"sourceType":"module"}