{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgSwapSend = void 0;\n\nvar json_1 = require(\"../../../util/json\");\n\nvar Coin_1 = require(\"../../Coin\");\n/**\n * Executes a market swap send between 2 denominations at the exchange rate registered by the\n * Oracle module. The sender account will lose the amount of coins offered, and receiver will receive funds\n * in the requested denomination after a swap and send fee has been applied.\n */\n\n\nvar MsgSwapSend =\n/** @class */\nfunction (_super) {\n  __extends(MsgSwapSend, _super);\n  /**\n   * @param from_address sender's account address\n   * @param to_address receiver's account address\n   * @param offer_coin coin to be swapped (from)\n   * @param ask_denom desired denomination (to)\n   */\n\n\n  function MsgSwapSend(from_address, to_address, offer_coin, ask_denom) {\n    var _this = _super.call(this) || this;\n\n    _this.from_address = from_address;\n    _this.to_address = to_address;\n    _this.offer_coin = offer_coin;\n    _this.ask_denom = ask_denom;\n    return _this;\n  }\n\n  MsgSwapSend.fromData = function (data) {\n    var _a = data.value,\n        from_address = _a.from_address,\n        to_address = _a.to_address,\n        offer_coin = _a.offer_coin,\n        ask_denom = _a.ask_denom;\n    return new MsgSwapSend(from_address, to_address, Coin_1.Coin.fromData(offer_coin), ask_denom);\n  };\n\n  MsgSwapSend.prototype.toData = function () {\n    var _a = this,\n        from_address = _a.from_address,\n        to_address = _a.to_address,\n        offer_coin = _a.offer_coin,\n        ask_denom = _a.ask_denom;\n\n    return {\n      type: 'market/MsgSwapSend',\n      value: {\n        from_address: from_address,\n        to_address: to_address,\n        offer_coin: offer_coin.toData(),\n        ask_denom: ask_denom\n      }\n    };\n  };\n\n  return MsgSwapSend;\n}(json_1.JSONSerializable);\n\nexports.MsgSwapSend = MsgSwapSend;","map":{"version":3,"sources":["../../../../src/core/market/msgs/MsgSwapSend.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAIA;;;;AAIG;;;AACH,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;AAC/B;;;;;AAKG;;;AACH,WAAA,WAAA,CACS,YADT,EAES,UAFT,EAGS,UAHT,EAIS,SAJT,EAIyB;AAJzB,QAAA,KAAA,GAME,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IANT;;AACS,IAAA,KAAA,CAAA,YAAA,GAAA,YAAA;AACA,IAAA,KAAA,CAAA,UAAA,GAAA,UAAA;AACA,IAAA,KAAA,CAAA,UAAA,GAAA,UAAA;AACA,IAAA,KAAA,CAAA,SAAA,GAAA,SAAA;;AAGR;;AAEa,EAAA,WAAA,CAAA,QAAA,GAAd,UAAuB,IAAvB,EAA6C;AAEzC,QAAA,EAAA,GACE,IAAI,CADoD,KAA1D;AAAA,QAAS,YAAY,GAAA,EAAA,CAAA,YAArB;AAAA,QAAuB,UAAU,GAAA,EAAA,CAAA,UAAjC;AAAA,QAAmC,UAAU,GAAA,EAAA,CAAA,UAA7C;AAAA,QAA+C,SAAS,GAAA,EAAA,CAAA,SAAxD;AAEF,WAAO,IAAI,WAAJ,CACL,YADK,EAEL,UAFK,EAGL,MAAA,CAAA,IAAA,CAAK,QAAL,CAAc,UAAd,CAHK,EAIL,SAJK,CAAP;AAMD,GAVa;;AAYP,EAAA,WAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAAsD,IAAtD;AAAA,QAAE,YAAY,GAAA,EAAA,CAAA,YAAd;AAAA,QAAgB,UAAU,GAAA,EAAA,CAAA,UAA1B;AAAA,QAA4B,UAAU,GAAA,EAAA,CAAA,UAAtC;AAAA,QAAwC,SAAS,GAAA,EAAA,CAAA,SAAjD;;AACN,WAAO;AACL,MAAA,IAAI,EAAE,oBADD;AAEL,MAAA,KAAK,EAAE;AACL,QAAA,YAAY,EAAA,YADP;AAEL,QAAA,UAAU,EAAA,UAFL;AAGL,QAAA,UAAU,EAAE,UAAU,CAAC,MAAX,EAHP;AAIL,QAAA,SAAS,EAAA;AAJJ;AAFF,KAAP;AASD,GAXM;;AAYT,SAAA,WAAA;AAAC,CAxCD,CAAiC,MAAA,CAAA,gBAAjC,CAAA;;AAAa,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MsgSwapSend = void 0;\nvar json_1 = require(\"../../../util/json\");\nvar Coin_1 = require(\"../../Coin\");\n/**\n * Executes a market swap send between 2 denominations at the exchange rate registered by the\n * Oracle module. The sender account will lose the amount of coins offered, and receiver will receive funds\n * in the requested denomination after a swap and send fee has been applied.\n */\nvar MsgSwapSend = /** @class */ (function (_super) {\n    __extends(MsgSwapSend, _super);\n    /**\n     * @param from_address sender's account address\n     * @param to_address receiver's account address\n     * @param offer_coin coin to be swapped (from)\n     * @param ask_denom desired denomination (to)\n     */\n    function MsgSwapSend(from_address, to_address, offer_coin, ask_denom) {\n        var _this = _super.call(this) || this;\n        _this.from_address = from_address;\n        _this.to_address = to_address;\n        _this.offer_coin = offer_coin;\n        _this.ask_denom = ask_denom;\n        return _this;\n    }\n    MsgSwapSend.fromData = function (data) {\n        var _a = data.value, from_address = _a.from_address, to_address = _a.to_address, offer_coin = _a.offer_coin, ask_denom = _a.ask_denom;\n        return new MsgSwapSend(from_address, to_address, Coin_1.Coin.fromData(offer_coin), ask_denom);\n    };\n    MsgSwapSend.prototype.toData = function () {\n        var _a = this, from_address = _a.from_address, to_address = _a.to_address, offer_coin = _a.offer_coin, ask_denom = _a.ask_denom;\n        return {\n            type: 'market/MsgSwapSend',\n            value: {\n                from_address: from_address,\n                to_address: to_address,\n                offer_coin: offer_coin.toData(),\n                ask_denom: ask_denom,\n            },\n        };\n    };\n    return MsgSwapSend;\n}(json_1.JSONSerializable));\nexports.MsgSwapSend = MsgSwapSend;\n//# sourceMappingURL=MsgSwapSend.js.map"]},"metadata":{},"sourceType":"script"}