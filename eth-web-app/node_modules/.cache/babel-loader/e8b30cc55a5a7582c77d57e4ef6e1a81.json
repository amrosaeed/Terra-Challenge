{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nvar defaultApplicationId = \"5f7f8547b90218002e9ce9dd\";\nexport var PocketProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(PocketProvider, _UrlJsonRpcProvider);\n\n  var _super = _createSuper(PocketProvider);\n\n  function PocketProvider() {\n    _classCallCheck(this, PocketProvider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.applicationId === defaultApplicationId;\n    }\n  }], [{\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      var apiKeyObj = {\n        applicationId: defaultApplicationId,\n        applicationSecretKey: null\n      };\n\n      if (apiKey == null) {\n        return apiKeyObj;\n      } // Parse applicationId and applicationSecretKey\n\n\n      if (typeof apiKey === \"string\") {\n        apiKeyObj.applicationId = apiKey;\n      } else if (apiKey.applicationSecretKey != null) {\n        logger.assertArgument(typeof apiKey.applicationId === \"string\", \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n        logger.assertArgument(typeof apiKey.applicationSecretKey === \"string\", \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n        apiKeyObj.applicationId = apiKey.applicationId;\n        apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n      } else if (apiKey.applicationId) {\n        apiKeyObj.applicationId = apiKey.applicationId;\n      }\n\n      return apiKeyObj;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n\n      switch (network ? network.name : \"unknown\") {\n        case \"homestead\":\n          host = \"eth-mainnet.gateway.pokt.network\";\n          break;\n\n        default:\n          logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"network\",\n            value: network\n          });\n      }\n\n      var connection = {\n        url: \"https://\".concat(host, \"/v1/\").concat(apiKey.applicationId)\n      }; // Initialize empty headers\n\n      connection.headers = {}; // Apply application secret key\n\n      if (apiKey.applicationSecretKey != null) {\n        connection.user = \"\";\n        connection.password = apiKey.applicationSecretKey;\n      }\n\n      return connection;\n    }\n  }]);\n\n  return PocketProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"sources":["../src.ts/pocket-provider.ts"],"names":[],"mappings":"AAAA;;;;;;AAKA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEA,SAAS,kBAAT,QAAmC,yBAAnC;AAEA,IAAM,oBAAoB,GAAG,0BAA7B;AAEA,WAAa,cAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,0CA6DuB;AACf,aAAQ,KAAK,aAAL,KAAuB,oBAA/B;AACH;AA/DL;AAAA;AAAA,8BAIqB,MAJrB,EAIgC;AACxB,UAAM,SAAS,GAA4D;AACvE,QAAA,aAAa,EAAE,oBADwD;AAEvE,QAAA,oBAAoB,EAAE;AAFiD,OAA3E;;AAKA,UAAI,MAAM,IAAI,IAAd,EAAoB;AAAE,eAAO,SAAP;AAAmB,OANjB,CAQxB;;;AACA,UAAI,OAAQ,MAAR,KAAoB,QAAxB,EAAkC;AAC9B,QAAA,SAAS,CAAC,aAAV,GAA0B,MAA1B;AAEH,OAHD,MAGO,IAAI,MAAM,CAAC,oBAAP,IAA+B,IAAnC,EAAyC;AAC5C,QAAA,MAAM,CAAC,cAAP,CAAuB,OAAQ,MAAM,CAAC,aAAf,KAAkC,QAAzD,EACI,gDADJ,EACsD,eADtD,EACuE,MAAM,CAAC,aAD9E;AAEA,QAAA,MAAM,CAAC,cAAP,CAAuB,OAAQ,MAAM,CAAC,oBAAf,KAAyC,QAAhE,EACI,8BADJ,EACoC,sBADpC,EAC4D,YAD5D;AAGA,QAAA,SAAS,CAAC,aAAV,GAA0B,MAAM,CAAC,aAAjC;AACA,QAAA,SAAS,CAAC,oBAAV,GAAiC,MAAM,CAAC,oBAAxC;AAEH,OATM,MASA,IAAI,MAAM,CAAC,aAAX,EAA0B;AAC7B,QAAA,SAAS,CAAC,aAAV,GAA0B,MAAM,CAAC,aAAjC;AACH;;AAED,aAAO,SAAP;AACH;AA9BL;AAAA;AAAA,2BAgCkB,OAhClB,EAgCoC,MAhCpC,EAgC+C;AACvC,UAAI,IAAI,GAAW,IAAnB;;AACA,cAAQ,OAAO,GAAG,OAAO,CAAC,IAAX,GAAkB,SAAjC;AACI,aAAK,WAAL;AACI,UAAA,IAAI,GAAG,kCAAP;AACA;;AACJ;AACI,UAAA,MAAM,CAAC,UAAP,CAAkB,qBAAlB,EAAyC,MAAM,CAAC,MAAP,CAAc,gBAAvD,EAAyE;AACrE,YAAA,QAAQ,EAAE,SAD2D;AAErE,YAAA,KAAK,EAAE;AAF8D,WAAzE;AALR;;AAWA,UAAM,UAAU,GAAmB;AAC/B,QAAA,GAAG,oBAAgB,IAAhB,iBAA6B,MAAM,CAAC,aAApC;AAD4B,OAAnC,CAbuC,CAiBvC;;AACA,MAAA,UAAU,CAAC,OAAX,GAAqB,EAArB,CAlBuC,CAoBvC;;AACA,UAAI,MAAM,CAAC,oBAAP,IAA+B,IAAnC,EAAyC;AACrC,QAAA,UAAU,CAAC,IAAX,GAAkB,EAAlB;AACA,QAAA,UAAU,CAAC,QAAX,GAAsB,MAAM,CAAC,oBAA7B;AACH;;AAED,aAAO,UAAP;AACH;AA3DL;;AAAA;AAAA,EAAoC,kBAApC","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultApplicationId = \"5f7f8547b90218002e9ce9dd\";\nexport class PocketProvider extends UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            applicationId: defaultApplicationId,\n            applicationSecretKey: null\n        };\n        if (apiKey == null) {\n            return apiKeyObj;\n        }\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n        }\n        else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"), \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n        }\n        else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n        }\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const connection = {\n            url: (`https:/\\/${host}/v1/${apiKey.applicationId}`),\n        };\n        // Initialize empty headers\n        connection.headers = {};\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n//# sourceMappingURL=pocket-provider.js.map"]},"metadata":{},"sourceType":"module"}