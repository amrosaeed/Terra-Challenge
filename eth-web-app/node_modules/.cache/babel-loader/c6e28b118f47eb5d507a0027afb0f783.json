{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExchangeRateVote = void 0;\n\nvar json_1 = require(\"../../util/json\");\n\nvar numeric_1 = require(\"../numeric\");\n/**\n * The following objects capture information from the Oracle API. To submit exchange\n * rate votes or prevotes, you'll need to create a transaction with [[MsgExchangeRateVote]]\n * or [[MsgExchangeRatePrevote]] and broadcast it.\n *\n *\n */\n\n/**\n * Stores information about data about Oracle votes fetched from the blockchain.\n */\n\n\nvar ExchangeRateVote =\n/** @class */\nfunction (_super) {\n  __extends(ExchangeRateVote, _super);\n  /**\n   *\n   * @param exchange_rate Exchange rate reported.\n   * @param denom Denomination against LUNA reported.\n   * @param voter Voting validator's operator address.\n   */\n\n\n  function ExchangeRateVote(exchange_rate, denom, voter) {\n    var _this = _super.call(this) || this;\n\n    _this.exchange_rate = exchange_rate;\n    _this.denom = denom;\n    _this.voter = voter;\n    return _this;\n  }\n\n  ExchangeRateVote.fromData = function (data) {\n    var exchange_rate = data.exchange_rate,\n        denom = data.denom,\n        voter = data.voter;\n    return new ExchangeRateVote(new numeric_1.Dec(exchange_rate), denom, voter);\n  };\n\n  ExchangeRateVote.prototype.toData = function () {\n    var _a = this,\n        exchange_rate = _a.exchange_rate,\n        denom = _a.denom,\n        voter = _a.voter;\n\n    return {\n      exchange_rate: exchange_rate.toString(),\n      denom: denom,\n      voter: voter\n    };\n  };\n\n  return ExchangeRateVote;\n}(json_1.JSONSerializable);\n\nexports.ExchangeRateVote = ExchangeRateVote;","map":{"version":3,"sources":["../../../src/core/oracle/ExchangeRateVote.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAGA;;;;;;AAMG;;AAEH;;AAEG;;;AACH,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;AACpC;;;;;AAKG;;;AACH,WAAA,gBAAA,CACS,aADT,EAES,KAFT,EAGS,KAHT,EAG0B;AAH1B,QAAA,KAAA,GAKE,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IALT;;AACS,IAAA,KAAA,CAAA,aAAA,GAAA,aAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;;AAGR;;AAEa,EAAA,gBAAA,CAAA,QAAA,GAAd,UAAuB,IAAvB,EAAkD;AACxC,QAAA,aAAa,GAAmB,IAAI,CAAvB,aAAb;AAAA,QAAe,KAAK,GAAY,IAAI,CAAhB,KAApB;AAAA,QAAsB,KAAK,GAAK,IAAI,CAAT,KAA3B;AACR,WAAO,IAAI,gBAAJ,CAAqB,IAAI,SAAA,CAAA,GAAJ,CAAQ,aAAR,CAArB,EAA6C,KAA7C,EAAoD,KAApD,CAAP;AACD,GAHa;;AAKP,EAAA,gBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAAkC,IAAlC;AAAA,QAAE,aAAa,GAAA,EAAA,CAAA,aAAf;AAAA,QAAiB,KAAK,GAAA,EAAA,CAAA,KAAtB;AAAA,QAAwB,KAAK,GAAA,EAAA,CAAA,KAA7B;;AACN,WAAO;AACL,MAAA,aAAa,EAAE,aAAa,CAAC,QAAd,EADV;AAEL,MAAA,KAAK,EAAA,KAFA;AAGL,MAAA,KAAK,EAAA;AAHA,KAAP;AAKD,GAPM;;AAQT,SAAA,gBAAA;AAAC,CA5BD,CAAsC,MAAA,CAAA,gBAAtC,CAAA;;AAAa,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExchangeRateVote = void 0;\nvar json_1 = require(\"../../util/json\");\nvar numeric_1 = require(\"../numeric\");\n/**\n * The following objects capture information from the Oracle API. To submit exchange\n * rate votes or prevotes, you'll need to create a transaction with [[MsgExchangeRateVote]]\n * or [[MsgExchangeRatePrevote]] and broadcast it.\n *\n *\n */\n/**\n * Stores information about data about Oracle votes fetched from the blockchain.\n */\nvar ExchangeRateVote = /** @class */ (function (_super) {\n    __extends(ExchangeRateVote, _super);\n    /**\n     *\n     * @param exchange_rate Exchange rate reported.\n     * @param denom Denomination against LUNA reported.\n     * @param voter Voting validator's operator address.\n     */\n    function ExchangeRateVote(exchange_rate, denom, voter) {\n        var _this = _super.call(this) || this;\n        _this.exchange_rate = exchange_rate;\n        _this.denom = denom;\n        _this.voter = voter;\n        return _this;\n    }\n    ExchangeRateVote.fromData = function (data) {\n        var exchange_rate = data.exchange_rate, denom = data.denom, voter = data.voter;\n        return new ExchangeRateVote(new numeric_1.Dec(exchange_rate), denom, voter);\n    };\n    ExchangeRateVote.prototype.toData = function () {\n        var _a = this, exchange_rate = _a.exchange_rate, denom = _a.denom, voter = _a.voter;\n        return {\n            exchange_rate: exchange_rate.toString(),\n            denom: denom,\n            voter: voter,\n        };\n    };\n    return ExchangeRateVote;\n}(json_1.JSONSerializable));\nexports.ExchangeRateVote = ExchangeRateVote;\n//# sourceMappingURL=ExchangeRateVote.js.map"]},"metadata":{},"sourceType":"script"}