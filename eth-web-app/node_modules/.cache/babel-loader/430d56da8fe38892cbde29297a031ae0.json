{"ast":null,"code":"import BigNumber from\"bignumber.js\";import numeral from\"numeral\";import{SMALLEST}from\"../constants\";var rm=BigNumber.ROUND_DOWN;export var dp=function dp(symbol){return!symbol?3:6;};export var validateDp=function validateDp(value,symbol){return new BigNumber(value).times(new BigNumber(10).pow(dp(symbol))).isInteger();};export var decimal=function decimal(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"0\";var dp=arguments.length>1&&arguments[1]!==undefined?arguments[1]:6;return new BigNumber(value).decimalPlaces(dp,rm).toString();};export var lookup=function lookup(){var _config$dp;var amount=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"0\";var symbol=arguments.length>1?arguments[1]:undefined;var config=arguments.length>2?arguments[2]:undefined;var value=symbol?new BigNumber(amount).div(SMALLEST).dp(6,rm):new BigNumber(amount);return value.dp((_config$dp=config===null||config===void 0?void 0:config.dp)!==null&&_config$dp!==void 0?_config$dp:(config===null||config===void 0?void 0:config.integer)?0:value.gte(SMALLEST)?2:dp(symbol),rm).toString();};export var lookupSymbol=function lookupSymbol(symbol){return symbol===\"uusd\"?\"UST\":symbol;};export var format=function format(amount,symbol,config){var value=new BigNumber(lookup(amount,symbol,config));var formatted=value.gte(SMALLEST)?numeral(value.div(1e4).integerValue(rm).times(1e4)).format(\"0,0.[00]a\"):numeral(value).format((config===null||config===void 0?void 0:config.integer)?\"0,0\":\"0,0.[000000]\");return formatted.toUpperCase();};export var formatAsset=function formatAsset(amount,symbol,config){return symbol?\"\".concat(format(amount,symbol,config),\" \").concat(lookupSymbol(symbol)):\"\";};export var toAmount=function toAmount(value){return value?new BigNumber(value).times(SMALLEST).integerValue().toString():\"0\";};","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/libs/parse.ts"],"names":["BigNumber","numeral","SMALLEST","rm","ROUND_DOWN","dp","symbol","validateDp","value","times","pow","isInteger","decimal","decimalPlaces","toString","lookup","amount","config","div","integer","gte","lookupSymbol","format","formatted","integerValue","toUpperCase","formatAsset","toAmount"],"mappings":"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","sourcesContent":["import BigNumber from \"bignumber.js\"\nimport numeral from \"numeral\"\nimport { SMALLEST } from \"../constants\"\n\ntype Formatter = (\n  amount?: string,\n  symbol?: string,\n  config?: FormatConfig\n) => string\n\nconst rm = BigNumber.ROUND_DOWN\n\nexport const dp = (symbol?: string) => (!symbol ? 3 : 6)\n\nexport const validateDp = (value: string, symbol?: string) =>\n  new BigNumber(value).times(new BigNumber(10).pow(dp(symbol))).isInteger()\n\nexport const decimal = (value = \"0\", dp = 6) =>\n  new BigNumber(value).decimalPlaces(dp, rm).toString()\n\nexport const lookup: Formatter = (amount = \"0\", symbol, config) => {\n  const value = symbol\n    ? new BigNumber(amount).div(SMALLEST).dp(6, rm)\n    : new BigNumber(amount)\n\n  return value\n    .dp(\n      config?.dp ??\n        (config?.integer ? 0 : value.gte(SMALLEST) ? 2 : dp(symbol)),\n      rm\n    )\n    .toString()\n}\n\nexport const lookupSymbol = (symbol?: string) =>\n  symbol === \"uusd\" ? \"UST\" : symbol\n\nexport const format: Formatter = (amount, symbol, config) => {\n  const value = new BigNumber(lookup(amount, symbol, config))\n  const formatted = value.gte(SMALLEST)\n    ? numeral(value.div(1e4).integerValue(rm).times(1e4)).format(\"0,0.[00]a\")\n    : numeral(value).format(config?.integer ? \"0,0\" : \"0,0.[000000]\")\n\n  return formatted.toUpperCase()\n}\n\nexport const formatAsset: Formatter = (amount, symbol, config) =>\n  symbol ? `${format(amount, symbol, config)} ${lookupSymbol(symbol)}` : \"\"\n\nexport const toAmount = (value: string) =>\n  value ? new BigNumber(value).times(SMALLEST).integerValue().toString() : \"0\"\n"]},"metadata":{},"sourceType":"module"}