{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MsgExchangeRatePrevote = void 0;\n\nvar json_1 = require(\"../../../util/json\");\n/**\n * In order to prevent validators from copying each others' price votes, voting occurs\n * in 2 stages. Firstly, you must pre-commit to a price by submitting a\n * MsgExchangeRatePrevote containing a hash, and then reveal your price in the\n * subsequent vote period.\n *\n * The vote hash reported in the prevote must match the hash of the vote's data in order\n * for the vote to count. Otherwise, it is automatically a miss.\n */\n\n\nvar MsgExchangeRatePrevote =\n/** @class */\nfunction (_super) {\n  __extends(MsgExchangeRatePrevote, _super);\n  /**\n   * @param hash vote hash\n   * @param denom denom for reporting the exchange rate\n   * @param feeder validator's feeder account address\n   * @param validator validator's operator address\n   */\n\n\n  function MsgExchangeRatePrevote(hash, denom, feeder, validator) {\n    var _this = _super.call(this) || this;\n\n    _this.hash = hash;\n    _this.denom = denom;\n    _this.feeder = feeder;\n    _this.validator = validator;\n    return _this;\n  }\n\n  MsgExchangeRatePrevote.fromData = function (data) {\n    var _a = data.value,\n        hash = _a.hash,\n        denom = _a.denom,\n        feeder = _a.feeder,\n        validator = _a.validator;\n    return new MsgExchangeRatePrevote(hash, denom, feeder, validator);\n  };\n\n  MsgExchangeRatePrevote.prototype.toData = function () {\n    var _a = this,\n        hash = _a.hash,\n        denom = _a.denom,\n        feeder = _a.feeder,\n        validator = _a.validator;\n\n    return {\n      type: 'oracle/MsgExchangeRatePrevote',\n      value: {\n        hash: hash,\n        denom: denom,\n        feeder: feeder,\n        validator: validator\n      }\n    };\n  };\n\n  return MsgExchangeRatePrevote;\n}(json_1.JSONSerializable);\n\nexports.MsgExchangeRatePrevote = MsgExchangeRatePrevote;","map":{"version":3,"sources":["../../../../src/core/oracle/msgs/MsgExchangeRatePrevote.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AAGA;;;;;;;;AAQG;;;AACH,IAAA,sBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4C,EAAA,SAAA,CAAA,sBAAA,EAAA,MAAA,CAAA;AAG1C;;;;;AAKG;;;AACH,WAAA,sBAAA,CACS,IADT,EAES,KAFT,EAGS,MAHT,EAIS,SAJT,EAI8B;AAJ9B,QAAA,KAAA,GAME,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IANT;;AACS,IAAA,KAAA,CAAA,IAAA,GAAA,IAAA;AACA,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;AACA,IAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AACA,IAAA,KAAA,CAAA,SAAA,GAAA,SAAA;;AAGR;;AAEa,EAAA,sBAAA,CAAA,QAAA,GAAd,UACE,IADF,EACmC;AAG/B,QAAA,EAAA,GACE,IAAI,CADmC,KAAzC;AAAA,QAAS,IAAI,GAAA,EAAA,CAAA,IAAb;AAAA,QAAe,KAAK,GAAA,EAAA,CAAA,KAApB;AAAA,QAAsB,MAAM,GAAA,EAAA,CAAA,MAA5B;AAAA,QAA8B,SAAS,GAAA,EAAA,CAAA,SAAvC;AAEF,WAAO,IAAI,sBAAJ,CAA2B,IAA3B,EAAiC,KAAjC,EAAwC,MAAxC,EAAgD,SAAhD,CAAP;AACD,GAPa;;AASP,EAAA,sBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACQ,QAAA,EAAA,GAAqC,IAArC;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,KAAK,GAAA,EAAA,CAAA,KAAb;AAAA,QAAe,MAAM,GAAA,EAAA,CAAA,MAArB;AAAA,QAAuB,SAAS,GAAA,EAAA,CAAA,SAAhC;;AACN,WAAO;AACL,MAAA,IAAI,EAAE,+BADD;AAEL,MAAA,KAAK,EAAE;AACL,QAAA,IAAI,EAAA,IADC;AAEL,QAAA,KAAK,EAAA,KAFA;AAGL,QAAA,MAAM,EAAA,MAHD;AAIL,QAAA,SAAS,EAAA;AAJJ;AAFF,KAAP;AASD,GAXM;;AAYT,SAAA,sBAAA;AAAC,CAvCD,CAA4C,MAAA,CAAA,gBAA5C,CAAA;;AAAa,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MsgExchangeRatePrevote = void 0;\nvar json_1 = require(\"../../../util/json\");\n/**\n * In order to prevent validators from copying each others' price votes, voting occurs\n * in 2 stages. Firstly, you must pre-commit to a price by submitting a\n * MsgExchangeRatePrevote containing a hash, and then reveal your price in the\n * subsequent vote period.\n *\n * The vote hash reported in the prevote must match the hash of the vote's data in order\n * for the vote to count. Otherwise, it is automatically a miss.\n */\nvar MsgExchangeRatePrevote = /** @class */ (function (_super) {\n    __extends(MsgExchangeRatePrevote, _super);\n    /**\n     * @param hash vote hash\n     * @param denom denom for reporting the exchange rate\n     * @param feeder validator's feeder account address\n     * @param validator validator's operator address\n     */\n    function MsgExchangeRatePrevote(hash, denom, feeder, validator) {\n        var _this = _super.call(this) || this;\n        _this.hash = hash;\n        _this.denom = denom;\n        _this.feeder = feeder;\n        _this.validator = validator;\n        return _this;\n    }\n    MsgExchangeRatePrevote.fromData = function (data) {\n        var _a = data.value, hash = _a.hash, denom = _a.denom, feeder = _a.feeder, validator = _a.validator;\n        return new MsgExchangeRatePrevote(hash, denom, feeder, validator);\n    };\n    MsgExchangeRatePrevote.prototype.toData = function () {\n        var _a = this, hash = _a.hash, denom = _a.denom, feeder = _a.feeder, validator = _a.validator;\n        return {\n            type: 'oracle/MsgExchangeRatePrevote',\n            value: {\n                hash: hash,\n                denom: denom,\n                feeder: feeder,\n                validator: validator,\n            },\n        };\n    };\n    return MsgExchangeRatePrevote;\n}(json_1.JSONSerializable));\nexports.MsgExchangeRatePrevote = MsgExchangeRatePrevote;\n//# sourceMappingURL=MsgExchangeRatePrevote.js.map"]},"metadata":{},"sourceType":"script"}