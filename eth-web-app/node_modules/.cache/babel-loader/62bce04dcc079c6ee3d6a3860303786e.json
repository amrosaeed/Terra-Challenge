{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxAPI = exports.isTxError = exports.Broadcast = void 0;\n\nvar BaseAPI_1 = require(\"./BaseAPI\");\n\nvar core_1 = require(\"../../../core\");\n\nvar hash_1 = require(\"../../../util/hash\");\n\nvar core_2 = require(\"../../../core\");\n/** Transaction broadcasting modes  */\n\n\nvar Broadcast;\n\n(function (Broadcast) {\n  /** Wait until the transaction has been included in the block */\n  Broadcast[\"BLOCK\"] = \"block\";\n  /** Return after DeliverTx() */\n\n  Broadcast[\"SYNC\"] = \"sync\";\n  /** Return after CheckTx() */\n\n  Broadcast[\"ASYNC\"] = \"async\";\n})(Broadcast = exports.Broadcast || (exports.Broadcast = {}));\n\nfunction isTxError(x) {\n  return x.code !== undefined;\n}\n\nexports.isTxError = isTxError;\n\nvar TxAPI =\n/** @class */\nfunction (_super) {\n  __extends(TxAPI, _super);\n\n  function TxAPI(lcd) {\n    var _this = _super.call(this, lcd.apiRequester) || this;\n\n    _this.lcd = lcd;\n    return _this;\n  }\n  /**\n   * Looks up a transaction on the blockchain, addressed by its hash\n   * @param txHash transaction's hash\n   */\n\n\n  TxAPI.prototype.txInfo = function (txHash) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.c.getRaw(\"/txs/\" + txHash).then(core_1.TxInfo.fromData)];\n      });\n    });\n  };\n  /**\n   * Builds a [[StdSignMsg]] that is ready to be signed by a [[Key]]. The appropriate\n   * account number and sequence will be fetched live from the blockchain and added to\n   * the resultant [[StdSignMsg]]. If no fee is provided, fee will be automatically\n   * estimated using the parameters, simulated using a \"dummy fee\" with sourceAddress's\n   * nonzero denominations in its balance.\n   *\n   * @param sourceAddress account address of signer\n   * @param options TX generation options\n   */\n\n\n  TxAPI.prototype.create = function (sourceAddress, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fee, memo, msgs, estimateFeeOptions, balance, balanceOne, stdTx, accountNumber, sequence, account;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            fee = options.fee, memo = options.memo;\n            msgs = options.msgs;\n            memo = memo || '';\n            estimateFeeOptions = {\n              gasPrices: options.gasPrices || this.lcd.config.gasPrices,\n              gasAdjustment: options.gasAdjustment || this.lcd.config.gasAdjustment\n            };\n            return [4\n            /*yield*/\n            , this.lcd.bank.balance(sourceAddress)];\n\n          case 1:\n            balance = _a.sent();\n            balanceOne = balance.map(function (c) {\n              return new core_1.Coin(c.denom, 1);\n            });\n            if (!(fee === undefined)) return [3\n            /*break*/\n            , 3];\n            stdTx = new core_1.StdTx(msgs, new core_1.StdFee(0, balanceOne), [], memo);\n            return [4\n            /*yield*/\n            , this.lcd.tx.estimateFee(stdTx, estimateFeeOptions)];\n\n          case 2:\n            fee = _a.sent();\n            _a.label = 3;\n\n          case 3:\n            accountNumber = options.account_number;\n            sequence = options.sequence;\n            if (!(!accountNumber || !sequence)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.lcd.auth.accountInfo(sourceAddress)];\n\n          case 4:\n            account = _a.sent();\n\n            if (!accountNumber) {\n              accountNumber = account.account_number;\n            }\n\n            if (!sequence) {\n              sequence = account.sequence;\n            }\n\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            , new core_1.StdSignMsg(this.lcd.config.chainID, accountNumber, sequence, fee, msgs, memo)];\n        }\n      });\n    });\n  };\n  /**\n   * Looks up transactions on the blockchain for the block height. If height is undefined,\n   * gets the transactions for the latest block.\n   * @param height block height\n   */\n\n\n  TxAPI.prototype.txInfosByHeight = function (height) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockInfo, txs, txhashes;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.lcd.tendermint.blockInfo(height)];\n\n          case 1:\n            blockInfo = _a.sent();\n            txs = blockInfo.block.data.txs;\n\n            if (!txs) {\n              return [2\n              /*return*/\n              , []];\n            } else {\n              txhashes = txs.map(function (txdata) {\n                return hash_1.hashAmino(txdata);\n              });\n              return [2\n              /*return*/\n              , Promise.all(txhashes.map(function (txhash) {\n                return _this.txInfo(txhash);\n              }))];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Estimates the transaction's fee by simulating it within the node\n   * @param tx transaction for which to estimate fee\n   * @param options options for fee estimation\n   */\n\n\n  TxAPI.prototype.estimateFee = function (tx, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var gasPrices, gasAdjustment, txValue, data;\n      return __generator(this, function (_a) {\n        gasPrices = (options === null || options === void 0 ? void 0 : options.gasPrices) || this.lcd.config.gasPrices;\n        gasAdjustment = (options === null || options === void 0 ? void 0 : options.gasAdjustment) || this.lcd.config.gasAdjustment;\n        txValue = __assign({}, tx instanceof core_1.StdSignMsg ? tx.toStdTx().toData().value : tx.toData().value);\n        txValue.fee.gas = '0';\n        data = {\n          tx: txValue,\n          gas_prices: gasPrices && new core_1.Coins(gasPrices).toData(),\n          gas_adjustment: gasAdjustment && gasAdjustment.toString()\n        };\n        return [2\n        /*return*/\n        , this.c.post(\"/txs/estimate_fee\", data).then(function (_a) {\n          var d = _a.result;\n          return new core_1.StdFee(Number.parseInt(d.gas), core_1.Coins.fromData(d.fees));\n        })];\n      });\n    });\n  };\n  /**\n   * Encode a transaction to Amino-encoding\n   * @param tx transaction to encode\n   */\n\n\n  TxAPI.prototype.encode = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.c.postRaw(\"/txs/encode\", tx.toData()).then(function (d) {\n          return d.tx;\n        })];\n      });\n    });\n  };\n  /**\n   * Get the transaction's hash\n   * @param tx transaction to hash\n   */\n\n\n  TxAPI.prototype.hash = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var amino;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.encode(tx)];\n\n          case 1:\n            amino = _a.sent();\n            return [2\n            /*return*/\n            , hash_1.hashAmino(amino)];\n        }\n      });\n    });\n  };\n\n  TxAPI.prototype._broadcast = function (tx, mode) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        data = {\n          tx: tx.toData().value,\n          mode: mode\n        };\n        return [2\n        /*return*/\n        , this.c.postRaw(\"/txs\", data)];\n      });\n    });\n  };\n  /**\n   * Broadcast the transaction using the \"block\" mode, waiting for its inclusion in the blockchain.\n   * @param tx tranasaction to broadcast\n   */\n\n\n  TxAPI.prototype.broadcast = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._broadcast(tx, Broadcast.BLOCK).then(function (d) {\n          var blockResult = {\n            height: Number.parseInt(d.height),\n            txhash: d.txhash,\n            raw_log: d.raw_log,\n            gas_wanted: Number.parseInt(d.gas_wanted),\n            gas_used: Number.parseInt(d.gas_used)\n          };\n\n          if (d.logs) {\n            blockResult.logs = d.logs.map(function (l) {\n              return core_2.TxLog.fromData(l);\n            });\n          }\n\n          if (d.code) {\n            blockResult.code = d.code;\n          }\n\n          if (d.codespace) {\n            blockResult.codespace = d.codespace;\n          }\n\n          return blockResult;\n        })];\n      });\n    });\n  };\n  /**\n   * NOTE: This is not a synchronous function and is unconventionally named. This function\n   * can be await as it returns a `Promise`.\n   *\n   * Broadcast the transaction using the \"sync\" mode, returning after DeliverTx() is performed.\n   * @param tx transaction to broadcast\n   */\n\n\n  TxAPI.prototype.broadcastSync = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._broadcast(tx, Broadcast.SYNC).then(function (d) {\n          var blockResult = {\n            height: Number.parseInt(d.height),\n            txhash: d.txhash,\n            raw_log: d.raw_log\n          };\n\n          if (d.code) {\n            blockResult.code = d.code;\n          }\n\n          if (d.codespace) {\n            blockResult.codespace = d.codespace;\n          }\n\n          return blockResult;\n        })];\n      });\n    });\n  };\n  /**\n   * Broadcast the transaction using the \"async\" mode, returning after CheckTx() is performed.\n   * @param tx transaction to broadcast\n   */\n\n\n  TxAPI.prototype.broadcastAsync = function (tx) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this._broadcast(tx, Broadcast.ASYNC).then(function (d) {\n          return {\n            height: Number.parseInt(d.height),\n            txhash: d.txhash\n          };\n        })];\n      });\n    });\n  };\n  /**\n   * Search for transactions based on event attributes.\n   * @param options\n   */\n\n\n  TxAPI.prototype.search = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.c.getRaw(\"/txs\", options).then(function (d) {\n          return {\n            total_count: Number.parseInt(d.total_count),\n            count: Number.parseInt(d.count),\n            page_number: Number.parseInt(d.page_number),\n            page_total: Number.parseInt(d.page_total),\n            limit: Number.parseInt(d.limit),\n            txs: d.txs.map(function (txdata) {\n              return core_1.TxInfo.fromData(txdata);\n            })\n          };\n        })];\n      });\n    });\n  };\n\n  return TxAPI;\n}(BaseAPI_1.BaseAPI);\n\nexports.TxAPI = TxAPI;","map":{"version":3,"sources":["../../../../src/client/lcd/api/TxAPI.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TxAPI = exports.isTxError = exports.Broadcast = void 0;\nvar BaseAPI_1 = require(\"./BaseAPI\");\nvar core_1 = require(\"../../../core\");\nvar hash_1 = require(\"../../../util/hash\");\nvar core_2 = require(\"../../../core\");\n/** Transaction broadcasting modes  */\nvar Broadcast;\n(function (Broadcast) {\n    /** Wait until the transaction has been included in the block */\n    Broadcast[\"BLOCK\"] = \"block\";\n    /** Return after DeliverTx() */\n    Broadcast[\"SYNC\"] = \"sync\";\n    /** Return after CheckTx() */\n    Broadcast[\"ASYNC\"] = \"async\";\n})(Broadcast = exports.Broadcast || (exports.Broadcast = {}));\nfunction isTxError(x) {\n    return x.code !== undefined;\n}\nexports.isTxError = isTxError;\nvar TxAPI = /** @class */ (function (_super) {\n    __extends(TxAPI, _super);\n    function TxAPI(lcd) {\n        var _this = _super.call(this, lcd.apiRequester) || this;\n        _this.lcd = lcd;\n        return _this;\n    }\n    /**\n     * Looks up a transaction on the blockchain, addressed by its hash\n     * @param txHash transaction's hash\n     */\n    TxAPI.prototype.txInfo = function (txHash) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.c.getRaw(\"/txs/\" + txHash).then(core_1.TxInfo.fromData)];\n            });\n        });\n    };\n    /**\n     * Builds a [[StdSignMsg]] that is ready to be signed by a [[Key]]. The appropriate\n     * account number and sequence will be fetched live from the blockchain and added to\n     * the resultant [[StdSignMsg]]. If no fee is provided, fee will be automatically\n     * estimated using the parameters, simulated using a \"dummy fee\" with sourceAddress's\n     * nonzero denominations in its balance.\n     *\n     * @param sourceAddress account address of signer\n     * @param options TX generation options\n     */\n    TxAPI.prototype.create = function (sourceAddress, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fee, memo, msgs, estimateFeeOptions, balance, balanceOne, stdTx, accountNumber, sequence, account;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        fee = options.fee, memo = options.memo;\n                        msgs = options.msgs;\n                        memo = memo || '';\n                        estimateFeeOptions = {\n                            gasPrices: options.gasPrices || this.lcd.config.gasPrices,\n                            gasAdjustment: options.gasAdjustment || this.lcd.config.gasAdjustment,\n                        };\n                        return [4 /*yield*/, this.lcd.bank.balance(sourceAddress)];\n                    case 1:\n                        balance = _a.sent();\n                        balanceOne = balance.map(function (c) { return new core_1.Coin(c.denom, 1); });\n                        if (!(fee === undefined)) return [3 /*break*/, 3];\n                        stdTx = new core_1.StdTx(msgs, new core_1.StdFee(0, balanceOne), [], memo);\n                        return [4 /*yield*/, this.lcd.tx.estimateFee(stdTx, estimateFeeOptions)];\n                    case 2:\n                        fee = _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        accountNumber = options.account_number;\n                        sequence = options.sequence;\n                        if (!(!accountNumber || !sequence)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.lcd.auth.accountInfo(sourceAddress)];\n                    case 4:\n                        account = _a.sent();\n                        if (!accountNumber) {\n                            accountNumber = account.account_number;\n                        }\n                        if (!sequence) {\n                            sequence = account.sequence;\n                        }\n                        _a.label = 5;\n                    case 5: return [2 /*return*/, new core_1.StdSignMsg(this.lcd.config.chainID, accountNumber, sequence, fee, msgs, memo)];\n                }\n            });\n        });\n    };\n    /**\n     * Looks up transactions on the blockchain for the block height. If height is undefined,\n     * gets the transactions for the latest block.\n     * @param height block height\n     */\n    TxAPI.prototype.txInfosByHeight = function (height) {\n        return __awaiter(this, void 0, void 0, function () {\n            var blockInfo, txs, txhashes;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.lcd.tendermint.blockInfo(height)];\n                    case 1:\n                        blockInfo = _a.sent();\n                        txs = blockInfo.block.data.txs;\n                        if (!txs) {\n                            return [2 /*return*/, []];\n                        }\n                        else {\n                            txhashes = txs.map(function (txdata) { return hash_1.hashAmino(txdata); });\n                            return [2 /*return*/, Promise.all(txhashes.map(function (txhash) { return _this.txInfo(txhash); }))];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Estimates the transaction's fee by simulating it within the node\n     * @param tx transaction for which to estimate fee\n     * @param options options for fee estimation\n     */\n    TxAPI.prototype.estimateFee = function (tx, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var gasPrices, gasAdjustment, txValue, data;\n            return __generator(this, function (_a) {\n                gasPrices = (options === null || options === void 0 ? void 0 : options.gasPrices) || this.lcd.config.gasPrices;\n                gasAdjustment = (options === null || options === void 0 ? void 0 : options.gasAdjustment) || this.lcd.config.gasAdjustment;\n                txValue = __assign({}, (tx instanceof core_1.StdSignMsg\n                    ? tx.toStdTx().toData().value\n                    : tx.toData().value));\n                txValue.fee.gas = '0';\n                data = {\n                    tx: txValue,\n                    gas_prices: gasPrices && new core_1.Coins(gasPrices).toData(),\n                    gas_adjustment: gasAdjustment && gasAdjustment.toString(),\n                };\n                return [2 /*return*/, this.c\n                        .post(\"/txs/estimate_fee\", data)\n                        .then(function (_a) {\n                        var d = _a.result;\n                        return new core_1.StdFee(Number.parseInt(d.gas), core_1.Coins.fromData(d.fees));\n                    })];\n            });\n        });\n    };\n    /**\n     * Encode a transaction to Amino-encoding\n     * @param tx transaction to encode\n     */\n    TxAPI.prototype.encode = function (tx) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.c\n                        .postRaw(\"/txs/encode\", tx.toData())\n                        .then(function (d) { return d.tx; })];\n            });\n        });\n    };\n    /**\n     * Get the transaction's hash\n     * @param tx transaction to hash\n     */\n    TxAPI.prototype.hash = function (tx) {\n        return __awaiter(this, void 0, void 0, function () {\n            var amino;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.encode(tx)];\n                    case 1:\n                        amino = _a.sent();\n                        return [2 /*return*/, hash_1.hashAmino(amino)];\n                }\n            });\n        });\n    };\n    TxAPI.prototype._broadcast = function (tx, mode) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                data = {\n                    tx: tx.toData().value,\n                    mode: mode,\n                };\n                return [2 /*return*/, this.c.postRaw(\"/txs\", data)];\n            });\n        });\n    };\n    /**\n     * Broadcast the transaction using the \"block\" mode, waiting for its inclusion in the blockchain.\n     * @param tx tranasaction to broadcast\n     */\n    TxAPI.prototype.broadcast = function (tx) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this._broadcast(tx, Broadcast.BLOCK).then(function (d) {\n                        var blockResult = {\n                            height: Number.parseInt(d.height),\n                            txhash: d.txhash,\n                            raw_log: d.raw_log,\n                            gas_wanted: Number.parseInt(d.gas_wanted),\n                            gas_used: Number.parseInt(d.gas_used),\n                        };\n                        if (d.logs) {\n                            blockResult.logs = d.logs.map(function (l) { return core_2.TxLog.fromData(l); });\n                        }\n                        if (d.code) {\n                            blockResult.code = d.code;\n                        }\n                        if (d.codespace) {\n                            blockResult.codespace = d.codespace;\n                        }\n                        return blockResult;\n                    })];\n            });\n        });\n    };\n    /**\n     * NOTE: This is not a synchronous function and is unconventionally named. This function\n     * can be await as it returns a `Promise`.\n     *\n     * Broadcast the transaction using the \"sync\" mode, returning after DeliverTx() is performed.\n     * @param tx transaction to broadcast\n     */\n    TxAPI.prototype.broadcastSync = function (tx) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this._broadcast(tx, Broadcast.SYNC).then(function (d) {\n                        var blockResult = {\n                            height: Number.parseInt(d.height),\n                            txhash: d.txhash,\n                            raw_log: d.raw_log,\n                        };\n                        if (d.code) {\n                            blockResult.code = d.code;\n                        }\n                        if (d.codespace) {\n                            blockResult.codespace = d.codespace;\n                        }\n                        return blockResult;\n                    })];\n            });\n        });\n    };\n    /**\n     * Broadcast the transaction using the \"async\" mode, returning after CheckTx() is performed.\n     * @param tx transaction to broadcast\n     */\n    TxAPI.prototype.broadcastAsync = function (tx) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this._broadcast(tx, Broadcast.ASYNC).then(function (d) { return ({\n                        height: Number.parseInt(d.height),\n                        txhash: d.txhash,\n                    }); })];\n            });\n        });\n    };\n    /**\n     * Search for transactions based on event attributes.\n     * @param options\n     */\n    TxAPI.prototype.search = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.c.getRaw(\"/txs\", options).then(function (d) { return ({\n                        total_count: Number.parseInt(d.total_count),\n                        count: Number.parseInt(d.count),\n                        page_number: Number.parseInt(d.page_number),\n                        page_total: Number.parseInt(d.page_total),\n                        limit: Number.parseInt(d.limit),\n                        txs: d.txs.map(function (txdata) { return core_1.TxInfo.fromData(txdata); }),\n                    }); })];\n            });\n        });\n    };\n    return TxAPI;\n}(BaseAPI_1.BaseAPI));\nexports.TxAPI = TxAPI;\n//# sourceMappingURL=TxAPI.js.map"]},"metadata":{},"sourceType":"script"}