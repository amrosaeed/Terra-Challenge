{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Extension = void 0;\n/**\n * Extension class is for communicating between page and extension\n */\n\nvar Extension =\n/** @class */\nfunction () {\n  /**\n   * Using singleton pattern, hence every instanciation will return same value\n   */\n  function Extension() {\n    if (Extension.instance) {\n      return Extension.instance;\n    }\n\n    Extension.instance = this;\n\n    var LocalMessageDuplexStream = require('post-message-stream');\n\n    this.inpageStream = new LocalMessageDuplexStream({\n      name: 'station:inpage',\n      target: 'station:content'\n    });\n  }\n\n  Extension.prototype.generateId = function () {\n    return Date.now();\n  };\n\n  Object.defineProperty(Extension.prototype, \"isAvailable\", {\n    /**\n     * Indicates the Station Extension is installed and availble (requires extension v1.1 or later)\n     */\n    get: function get() {\n      return !!window.isTerraExtensionAvailable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * low level function for sending message to extension.\n   * Do not use this function unless you know what you are doing.\n   */\n\n  Extension.prototype.send = function (type, data) {\n    var id = this.generateId();\n    this.inpageStream.write(__assign(__assign({}, data), {\n      id: id,\n      type: type\n    }));\n    return id;\n  };\n\n  Extension.prototype.on = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this.inpageStream.on('data', function (data) {\n      if (typeof args[0] === 'string') {\n        data.name === args[0] && args[1](data.payload, data.name);\n      } else {\n        args[0](data.payload, data.name);\n      }\n    });\n  };\n  /**\n   * Request to Station Extension for connecting a wallet\n   *\n   * @return {string}     name      'onConnect'\n   * @return {AccAddress} payload   Terra account address\n   */\n\n\n  Extension.prototype.connect = function () {\n    return this.send('connect');\n  };\n  /**\n   * Request for Station Extension information\n   *\n   * @return {object}  payload.network\n   * @return {string}  payload.network.name    Name of the network\n   * @return {string}  payload.network.chainId Chain ID\n   * @return {string}  payload.network.lcd     LCD address\n   * @return {string}  payload.network.fcd     FCD address\n   * @return {string}  payload.network.ws      Websocket address\n   */\n\n\n  Extension.prototype.info = function () {\n    return this.send('info');\n  };\n  /**\n   * Request for signing tx\n   *\n   * @return {string}  name               'onSign'\n   * @return {object}  payload\n   * @return {number}  payload.id         identifier\n   * @return {string}  payload.origin     origin address\n   * @return {Msg[]}   payload.msgs       requested msgs\n   * @return {boolean} payload.success\n   * @return {string}  payload.result.public_key Base64 encoded public key\n   * @return {string}  payload.result.signature  Base64 encoded signature\n   * @return {number}  payload.result.recid      Recovery id\n   * @return {StdSignMsg.Data} payload.result.stdSignMsgData\n   *\n   * @example of broadcasting\n   *\n   * const { signature, public_key, recid, stdSignMsg } = payload.result;\n   *\n   * const sig = StdSignature.fromData({\n   *   signature,\n   *   pub_key: {\n   *    type: 'tendermint/PubKeySecp256k1',\n   *    value: public_key,\n   *  },\n   * });\n   *\n   * const stdSignMsg = StdSignMsg.fromData(payload.result.stdSignMsgData);\n   * terra.tx.broadcast(new StdTx(stdSignMsg.msgs, stdSignMsg.fee, [sig], stdSignMsg.memo));\n   */\n\n\n  Extension.prototype.sign = function (options) {\n    var _a, _b, _c;\n\n    return this.send('sign', __assign(__assign({}, options), {\n      msgs: options.msgs.map(function (msg) {\n        return msg.toJSON();\n      }),\n      fee: (_a = options.fee) === null || _a === void 0 ? void 0 : _a.toJSON(),\n      memo: options.memo,\n      gasPrices: (_b = options.gasPrices) === null || _b === void 0 ? void 0 : _b.toString(),\n      gasAdjustment: (_c = options.gasAdjustment) === null || _c === void 0 ? void 0 : _c.toString(),\n      account_number: options.account_number,\n      sequence: options.sequence,\n      waitForConfirmation: options.waitForConfirmation,\n      purgeQueue: options.purgeQueue\n    }));\n  };\n  /**\n   * Request for sign and post to LCD server\n   *\n   * @return {string}  name                   'onPost'\n   * @return {object}  payload\n   * @return {number}  payload.id             identifier\n   * @return {string}  payload.origin         origin address\n   * @return {Msg[]}   payload.msgs           requested msgs\n   * @return {boolean} payload.success\n   * @return {number|undefined} payload.result.code\n   *                                          error code. undefined with successful tx\n   * @return {string}  payload.result.raw_log raw log\n   * @return {string}  payload.result.txhash  transaction hash\n   */\n\n\n  Extension.prototype.post = function (options) {\n    var _a, _b, _c;\n\n    return this.send('post', {\n      msgs: options.msgs.map(function (msg) {\n        return msg.toJSON();\n      }),\n      fee: (_a = options.fee) === null || _a === void 0 ? void 0 : _a.toJSON(),\n      memo: options.memo,\n      gasPrices: (_b = options.gasPrices) === null || _b === void 0 ? void 0 : _b.toString(),\n      gasAdjustment: (_c = options.gasAdjustment) === null || _c === void 0 ? void 0 : _c.toString(),\n      account_number: options.account_number,\n      sequence: options.sequence,\n      waitForConfirmation: options.waitForConfirmation,\n      purgeQueue: options.purgeQueue\n    });\n  };\n\n  return Extension;\n}();\n\nexports.Extension = Extension;","map":{"version":3,"sources":["../../src/extension/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Extension = void 0;\n/**\n * Extension class is for communicating between page and extension\n */\nvar Extension = /** @class */ (function () {\n    /**\n     * Using singleton pattern, hence every instanciation will return same value\n     */\n    function Extension() {\n        if (Extension.instance) {\n            return Extension.instance;\n        }\n        Extension.instance = this;\n        var LocalMessageDuplexStream = require('post-message-stream');\n        this.inpageStream = new LocalMessageDuplexStream({\n            name: 'station:inpage',\n            target: 'station:content',\n        });\n    }\n    Extension.prototype.generateId = function () {\n        return Date.now();\n    };\n    Object.defineProperty(Extension.prototype, \"isAvailable\", {\n        /**\n         * Indicates the Station Extension is installed and availble (requires extension v1.1 or later)\n         */\n        get: function () {\n            return !!window.isTerraExtensionAvailable;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * low level function for sending message to extension.\n     * Do not use this function unless you know what you are doing.\n     */\n    Extension.prototype.send = function (type, data) {\n        var id = this.generateId();\n        this.inpageStream.write(__assign(__assign({}, data), { id: id,\n            type: type }));\n        return id;\n    };\n    Extension.prototype.on = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        this.inpageStream.on('data', function (data) {\n            if (typeof args[0] === 'string') {\n                data.name === args[0] && args[1](data.payload, data.name);\n            }\n            else {\n                args[0](data.payload, data.name);\n            }\n        });\n    };\n    /**\n     * Request to Station Extension for connecting a wallet\n     *\n     * @return {string}     name      'onConnect'\n     * @return {AccAddress} payload   Terra account address\n     */\n    Extension.prototype.connect = function () {\n        return this.send('connect');\n    };\n    /**\n     * Request for Station Extension information\n     *\n     * @return {object}  payload.network\n     * @return {string}  payload.network.name    Name of the network\n     * @return {string}  payload.network.chainId Chain ID\n     * @return {string}  payload.network.lcd     LCD address\n     * @return {string}  payload.network.fcd     FCD address\n     * @return {string}  payload.network.ws      Websocket address\n     */\n    Extension.prototype.info = function () {\n        return this.send('info');\n    };\n    /**\n     * Request for signing tx\n     *\n     * @return {string}  name               'onSign'\n     * @return {object}  payload\n     * @return {number}  payload.id         identifier\n     * @return {string}  payload.origin     origin address\n     * @return {Msg[]}   payload.msgs       requested msgs\n     * @return {boolean} payload.success\n     * @return {string}  payload.result.public_key Base64 encoded public key\n     * @return {string}  payload.result.signature  Base64 encoded signature\n     * @return {number}  payload.result.recid      Recovery id\n     * @return {StdSignMsg.Data} payload.result.stdSignMsgData\n     *\n     * @example of broadcasting\n     *\n     * const { signature, public_key, recid, stdSignMsg } = payload.result;\n     *\n     * const sig = StdSignature.fromData({\n     *   signature,\n     *   pub_key: {\n     *    type: 'tendermint/PubKeySecp256k1',\n     *    value: public_key,\n     *  },\n     * });\n     *\n     * const stdSignMsg = StdSignMsg.fromData(payload.result.stdSignMsgData);\n     * terra.tx.broadcast(new StdTx(stdSignMsg.msgs, stdSignMsg.fee, [sig], stdSignMsg.memo));\n     */\n    Extension.prototype.sign = function (options) {\n        var _a, _b, _c;\n        return this.send('sign', __assign(__assign({}, options), { msgs: options.msgs.map(function (msg) { return msg.toJSON(); }), fee: (_a = options.fee) === null || _a === void 0 ? void 0 : _a.toJSON(), memo: options.memo, gasPrices: (_b = options.gasPrices) === null || _b === void 0 ? void 0 : _b.toString(), gasAdjustment: (_c = options.gasAdjustment) === null || _c === void 0 ? void 0 : _c.toString(), account_number: options.account_number, sequence: options.sequence, waitForConfirmation: options.waitForConfirmation, purgeQueue: options.purgeQueue }));\n    };\n    /**\n     * Request for sign and post to LCD server\n     *\n     * @return {string}  name                   'onPost'\n     * @return {object}  payload\n     * @return {number}  payload.id             identifier\n     * @return {string}  payload.origin         origin address\n     * @return {Msg[]}   payload.msgs           requested msgs\n     * @return {boolean} payload.success\n     * @return {number|undefined} payload.result.code\n     *                                          error code. undefined with successful tx\n     * @return {string}  payload.result.raw_log raw log\n     * @return {string}  payload.result.txhash  transaction hash\n     */\n    Extension.prototype.post = function (options) {\n        var _a, _b, _c;\n        return this.send('post', {\n            msgs: options.msgs.map(function (msg) { return msg.toJSON(); }),\n            fee: (_a = options.fee) === null || _a === void 0 ? void 0 : _a.toJSON(),\n            memo: options.memo,\n            gasPrices: (_b = options.gasPrices) === null || _b === void 0 ? void 0 : _b.toString(),\n            gasAdjustment: (_c = options.gasAdjustment) === null || _c === void 0 ? void 0 : _c.toString(),\n            account_number: options.account_number,\n            sequence: options.sequence,\n            waitForConfirmation: options.waitForConfirmation,\n            purgeQueue: options.purgeQueue,\n        });\n    };\n    return Extension;\n}());\nexports.Extension = Extension;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}