{"ast":null,"code":"import _slicedToArray from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useMemo,useState}from\"react\";import{useRecoilValue}from\"recoil\";import{useQuery,ApolloClient,InMemoryCache}from\"@apollo/client\";import AIRDROP from\"../airdrop/gqldocs\";import{MAINNET}from\"../constants\";import{useAddress}from\"../database/address\";import{networkNameQuery}from\"../database/network\";var useQueryAirdrop=function useQueryAirdrop(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),airdrop=_useState2[0],setAirdrop=_useState2[1];/* client */var name=useRecoilValue(networkNameQuery);var subdomain=name===MAINNET?\"\":\"tequila-\";var uri=\"https://\".concat(subdomain,\"graph.mirror.finance/graphql\");var client=useMemo(function(){return new ApolloClient({uri:uri,cache:new InMemoryCache()});},[uri]);/* address */var address=useAddress();/* query */useQuery(AIRDROP,{variables:{address:address.toLowerCase(),network:\"ETH\"},client:client,onCompleted:function onCompleted(data){return setAirdrop(data===null||data===void 0?void 0:data.airdrop[0]);},skip:!address||!!airdrop});return airdrop;};export default useQueryAirdrop;","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/hooks/useQueryAirdrop.ts"],"names":["useMemo","useState","useRecoilValue","useQuery","ApolloClient","InMemoryCache","AIRDROP","MAINNET","useAddress","networkNameQuery","useQueryAirdrop","airdrop","setAirdrop","name","subdomain","uri","client","cache","address","variables","toLowerCase","network","onCompleted","data","skip"],"mappings":"4JAAA,OAASA,OAAT,CAAkBC,QAAlB,KAAkC,OAAlC,CACA,OAASC,cAAT,KAA+B,QAA/B,CACA,OAASC,QAAT,CAAmBC,YAAnB,CAAiCC,aAAjC,KAAsD,gBAAtD,CACA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,CACA,OAASC,OAAT,KAAwB,cAAxB,CACA,OAASC,UAAT,KAA2B,qBAA3B,CACA,OAASC,gBAAT,KAAiC,qBAAjC,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,eACET,QAAQ,EADV,wCACrBU,OADqB,eACZC,UADY,eAG5B,YACA,GAAMC,CAAAA,IAAI,CAAGX,cAAc,CAACO,gBAAD,CAA3B,CACA,GAAMK,CAAAA,SAAS,CAAGD,IAAI,GAAKN,OAAT,CAAmB,EAAnB,CAAwB,UAA1C,CACA,GAAMQ,CAAAA,GAAG,mBAAcD,SAAd,gCAAT,CACA,GAAME,CAAAA,MAAM,CAAGhB,OAAO,CACpB,iBAAM,IAAII,CAAAA,YAAJ,CAAiB,CAAEW,GAAG,CAAHA,GAAF,CAAOE,KAAK,CAAE,GAAIZ,CAAAA,aAAJ,EAAd,CAAjB,CAAN,EADoB,CAEpB,CAACU,GAAD,CAFoB,CAAtB,CAKA,aACA,GAAMG,CAAAA,OAAO,CAAGV,UAAU,EAA1B,CAEA,WACAL,QAAQ,CAAyBG,OAAzB,CAAkC,CACxCa,SAAS,CAAE,CAAED,OAAO,CAAEA,OAAO,CAACE,WAAR,EAAX,CAAkCC,OAAO,CAAE,KAA3C,CAD6B,CAExCL,MAAM,CAANA,MAFwC,CAGxCM,WAAW,CAAE,qBAACC,IAAD,QAAUX,CAAAA,UAAU,CAACW,IAAD,SAACA,IAAD,iBAACA,IAAI,CAAEZ,OAAN,CAAc,CAAd,CAAD,CAApB,EAH2B,CAIxCa,IAAI,CAAE,CAACN,OAAD,EAAY,CAAC,CAACP,OAJoB,CAAlC,CAAR,CAOA,MAAOA,CAAAA,OAAP,CACD,CAxBD,CA0BA,cAAeD,CAAAA,eAAf","sourcesContent":["import { useMemo, useState } from \"react\"\nimport { useRecoilValue } from \"recoil\"\nimport { useQuery, ApolloClient, InMemoryCache } from \"@apollo/client\"\nimport AIRDROP from \"../airdrop/gqldocs\"\nimport { MAINNET } from \"../constants\"\nimport { useAddress } from \"../database/address\"\nimport { networkNameQuery } from \"../database/network\"\n\nconst useQueryAirdrop = () => {\n  const [airdrop, setAirdrop] = useState<Airdrop>()\n\n  /* client */\n  const name = useRecoilValue(networkNameQuery)\n  const subdomain = name === MAINNET ? \"\" : \"tequila-\"\n  const uri = `https://${subdomain}graph.mirror.finance/graphql`\n  const client = useMemo(\n    () => new ApolloClient({ uri, cache: new InMemoryCache() }),\n    [uri]\n  )\n\n  /* address */\n  const address = useAddress()\n\n  /* query */\n  useQuery<{ airdrop: Airdrop[] }>(AIRDROP, {\n    variables: { address: address.toLowerCase(), network: \"ETH\" },\n    client,\n    onCompleted: (data) => setAirdrop(data?.airdrop[0]),\n    skip: !address || !!airdrop,\n  })\n\n  return airdrop\n}\n\nexport default useQueryAirdrop\n"]},"metadata":{},"sourceType":"module"}