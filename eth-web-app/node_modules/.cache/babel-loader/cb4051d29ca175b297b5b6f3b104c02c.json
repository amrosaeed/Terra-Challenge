{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TxLog = exports.EventsByType = exports.TxInfo = void 0;\n\nvar json_1 = require(\"../util/json\");\n\nvar StdTx_1 = require(\"./StdTx\");\n/**\n * A TxInfo data structure is used to capture information from a transaction lookup for\n * a transaction already included in a block\n */\n\n\nvar TxInfo =\n/** @class */\nfunction (_super) {\n  __extends(TxInfo, _super);\n  /**\n   *\n   * @param height height of the block in which the transaction was included.\n   * @param txhash transaction's hash.\n   * @param raw_log raw log information, as a string.\n   * @param logs log information\n   * @param gas_wanted gas limited submitted in fee\n   * @param gas_used actual gas consumption\n   * @param tx transaction content\n   * @param timestamp time of inclusion\n   * @param code error code\n   */\n\n\n  function TxInfo(height, txhash, raw_log, logs, gas_wanted, gas_used, tx, timestamp, code, codespace) {\n    var _this = _super.call(this) || this;\n\n    _this.height = height;\n    _this.txhash = txhash;\n    _this.raw_log = raw_log;\n    _this.logs = logs;\n    _this.gas_wanted = gas_wanted;\n    _this.gas_used = gas_used;\n    _this.tx = tx;\n    _this.timestamp = timestamp;\n    _this.code = code;\n    _this.codespace = codespace;\n    return _this;\n  }\n\n  TxInfo.fromData = function (data) {\n    return new TxInfo(Number.parseInt(data.height), data.txhash, data.raw_log, data.logs && data.logs.map(function (log) {\n      return TxLog.fromData(log);\n    }), Number.parseInt(data.gas_wanted), Number.parseInt(data.gas_used), StdTx_1.StdTx.fromData(data.tx), data.timestamp, data.code, data.codespace);\n  };\n\n  TxInfo.prototype.toData = function () {\n    var data = {\n      height: this.height.toFixed(),\n      txhash: this.txhash,\n      raw_log: this.raw_log,\n      gas_wanted: this.gas_wanted.toFixed(),\n      gas_used: this.gas_used.toFixed(),\n      tx: this.tx.toData(),\n      timestamp: this.timestamp\n    };\n\n    if (this.logs) {\n      data.logs = this.logs.map(function (log) {\n        return log.toData();\n      });\n    }\n\n    if (this.code) {\n      data.code = this.code;\n    }\n\n    if (this.codespace) {\n      data.codespace = this.codespace;\n    }\n\n    return data;\n  };\n\n  return TxInfo;\n}(json_1.JSONSerializable);\n\nexports.TxInfo = TxInfo;\nvar EventsByType;\n\n(function (EventsByType) {\n  function parse(eventData) {\n    var events = {};\n    eventData.forEach(function (ev) {\n      ev.attributes.forEach(function (attr) {\n        if (!(ev.type in events)) {\n          events[ev.type] = {};\n        }\n\n        if (!(attr.key in events[ev.type])) {\n          events[ev.type][attr.key] = [];\n        }\n\n        events[ev.type][attr.key].push(attr.value);\n      });\n    });\n    return events;\n  }\n\n  EventsByType.parse = parse;\n})(EventsByType = exports.EventsByType || (exports.EventsByType = {}));\n\nvar TxLog =\n/** @class */\nfunction (_super) {\n  __extends(TxLog, _super);\n\n  function TxLog(msg_index, log, events) {\n    var _this = _super.call(this) || this;\n\n    _this.msg_index = msg_index;\n    _this.log = log;\n    _this.events = events;\n    _this.eventsByType = EventsByType.parse(_this.events);\n    return _this;\n  }\n\n  TxLog.fromData = function (data) {\n    var msg_index = data.msg_index,\n        log = data.log,\n        events = data.events;\n    return new TxLog(msg_index, log, events);\n  };\n\n  TxLog.prototype.toData = function () {\n    var _a = this,\n        msg_index = _a.msg_index,\n        log = _a.log,\n        events = _a.events;\n\n    return {\n      msg_index: msg_index,\n      log: log,\n      events: events\n    };\n  };\n\n  return TxLog;\n}(json_1.JSONSerializable);\n\nexports.TxLog = TxLog;","map":{"version":3,"sources":["../../src/core/TxInfo.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TxLog = exports.EventsByType = exports.TxInfo = void 0;\nvar json_1 = require(\"../util/json\");\nvar StdTx_1 = require(\"./StdTx\");\n/**\n * A TxInfo data structure is used to capture information from a transaction lookup for\n * a transaction already included in a block\n */\nvar TxInfo = /** @class */ (function (_super) {\n    __extends(TxInfo, _super);\n    /**\n     *\n     * @param height height of the block in which the transaction was included.\n     * @param txhash transaction's hash.\n     * @param raw_log raw log information, as a string.\n     * @param logs log information\n     * @param gas_wanted gas limited submitted in fee\n     * @param gas_used actual gas consumption\n     * @param tx transaction content\n     * @param timestamp time of inclusion\n     * @param code error code\n     */\n    function TxInfo(height, txhash, raw_log, logs, gas_wanted, gas_used, tx, timestamp, code, codespace) {\n        var _this = _super.call(this) || this;\n        _this.height = height;\n        _this.txhash = txhash;\n        _this.raw_log = raw_log;\n        _this.logs = logs;\n        _this.gas_wanted = gas_wanted;\n        _this.gas_used = gas_used;\n        _this.tx = tx;\n        _this.timestamp = timestamp;\n        _this.code = code;\n        _this.codespace = codespace;\n        return _this;\n    }\n    TxInfo.fromData = function (data) {\n        return new TxInfo(Number.parseInt(data.height), data.txhash, data.raw_log, data.logs && data.logs.map(function (log) { return TxLog.fromData(log); }), Number.parseInt(data.gas_wanted), Number.parseInt(data.gas_used), StdTx_1.StdTx.fromData(data.tx), data.timestamp, data.code, data.codespace);\n    };\n    TxInfo.prototype.toData = function () {\n        var data = {\n            height: this.height.toFixed(),\n            txhash: this.txhash,\n            raw_log: this.raw_log,\n            gas_wanted: this.gas_wanted.toFixed(),\n            gas_used: this.gas_used.toFixed(),\n            tx: this.tx.toData(),\n            timestamp: this.timestamp,\n        };\n        if (this.logs) {\n            data.logs = this.logs.map(function (log) { return log.toData(); });\n        }\n        if (this.code) {\n            data.code = this.code;\n        }\n        if (this.codespace) {\n            data.codespace = this.codespace;\n        }\n        return data;\n    };\n    return TxInfo;\n}(json_1.JSONSerializable));\nexports.TxInfo = TxInfo;\nvar EventsByType;\n(function (EventsByType) {\n    function parse(eventData) {\n        var events = {};\n        eventData.forEach(function (ev) {\n            ev.attributes.forEach(function (attr) {\n                if (!(ev.type in events)) {\n                    events[ev.type] = {};\n                }\n                if (!(attr.key in events[ev.type])) {\n                    events[ev.type][attr.key] = [];\n                }\n                events[ev.type][attr.key].push(attr.value);\n            });\n        });\n        return events;\n    }\n    EventsByType.parse = parse;\n})(EventsByType = exports.EventsByType || (exports.EventsByType = {}));\nvar TxLog = /** @class */ (function (_super) {\n    __extends(TxLog, _super);\n    function TxLog(msg_index, log, events) {\n        var _this = _super.call(this) || this;\n        _this.msg_index = msg_index;\n        _this.log = log;\n        _this.events = events;\n        _this.eventsByType = EventsByType.parse(_this.events);\n        return _this;\n    }\n    TxLog.fromData = function (data) {\n        var msg_index = data.msg_index, log = data.log, events = data.events;\n        return new TxLog(msg_index, log, events);\n    };\n    TxLog.prototype.toData = function () {\n        var _a = this, msg_index = _a.msg_index, log = _a.log, events = _a.events;\n        return {\n            msg_index: msg_index,\n            log: log,\n            events: events,\n        };\n    };\n    return TxLog;\n}(json_1.JSONSerializable));\nexports.TxLog = TxLog;\n//# sourceMappingURL=TxInfo.js.map"]},"metadata":{},"sourceType":"script"}