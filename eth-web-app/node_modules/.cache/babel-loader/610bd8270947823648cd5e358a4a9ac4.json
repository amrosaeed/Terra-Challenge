{"ast":null,"code":"import _defineProperty from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{selector,selectorFamily,useRecoilValue}from\"recoil\";import homestead from\"../whitelist/homestead.json\";import ropsten from\"../whitelist/ropsten.json\";import{isAsset}from\"../types/isItem\";import{networkNameQuery}from\"./network\";export var whitelistQuery=selector({key:\"whitelist\",get:function get(_ref){var _byNetwork$name;var _get=_ref.get;var name=_get(networkNameQuery);var byNetwork={homestead:homestead,ropsten:ropsten};return(_byNetwork$name=byNetwork[name])!==null&&_byNetwork$name!==void 0?_byNetwork$name:{};}});export var assetsQuery=selector({key:\"assets\",get:function get(_ref2){var _get2=_ref2.get;var listed=_get2(listedAssetsQuery(\"all\"));return listed.reduce(function(acc,item){return Object.assign({},acc,isAsset(item)&&_defineProperty({},item.token,item));},{});}});export var listedQuery=selectorFamily({key:\"listed\",get:function get(type){return function(_ref4){var get=_ref4.get;var whitelist=get(whitelistQuery);var listedAll=Object.values(whitelist);return{all:listedAll,listed:listedAll.filter(function(_ref5){var status=_ref5.status;return status===\"LISTED\";})}[type];};}});export var listedAssetsQuery=selectorFamily({key:\"listedAssets\",get:function get(type){return function(_ref6){var get=_ref6.get;var listed=get(listedQuery(type));return listed.filter(isAsset);};}});export var useWhitelist=function useWhitelist(){var value=useRecoilValue(whitelistQuery);return value;};export var useListed=function useListed(){var type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"all\";var value=useRecoilValue(listedQuery(type));return value;};export var useListedAssets=function useListedAssets(){var type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"all\";var value=useRecoilValue(listedAssetsQuery(type));return value;};","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/database/assets.ts"],"names":["selector","selectorFamily","useRecoilValue","homestead","ropsten","isAsset","networkNameQuery","whitelistQuery","key","get","name","byNetwork","assetsQuery","listed","listedAssetsQuery","reduce","acc","item","Object","assign","token","listedQuery","type","whitelist","listedAll","values","all","filter","status","useWhitelist","value","useListed","useListedAssets"],"mappings":"8JAAA,OAASA,QAAT,CAAmBC,cAAnB,CAAmCC,cAAnC,KAAyD,QAAzD,CAEA,MAAOC,CAAAA,SAAP,KAAsB,6BAAtB,CACA,MAAOC,CAAAA,OAAP,KAAoB,2BAApB,CACA,OAASC,OAAT,KAAwB,iBAAxB,CACA,OAASC,gBAAT,KAAiC,WAAjC,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAGP,QAAQ,CAAyB,CAC7DQ,GAAG,CAAE,WADwD,CAE7DC,GAAG,CAAE,kBAAa,wBAAVA,CAAAA,IAAU,MAAVA,GAAU,CAChB,GAAMC,CAAAA,IAAI,CAAGD,IAAG,CAACH,gBAAD,CAAhB,CACA,GAAMK,CAAAA,SAA6C,CAAG,CAAER,SAAS,CAATA,SAAF,CAAaC,OAAO,CAAPA,OAAb,CAAtD,CACA,uBAAOO,SAAS,CAACD,IAAD,CAAhB,mDAA0B,EAA1B,CACD,CAN4D,CAAzB,CAA/B,CASP,MAAO,IAAME,CAAAA,WAAW,CAAGZ,QAAQ,CAA0B,CAC3DQ,GAAG,CAAE,QADsD,CAE3DC,GAAG,CAAE,mBAAa,IAAVA,CAAAA,KAAU,OAAVA,GAAU,CAChB,GAAMI,CAAAA,MAAM,CAAGJ,KAAG,CAACK,iBAAiB,CAAC,KAAD,CAAlB,CAAlB,CACA,MAAOD,CAAAA,MAAM,CAACE,MAAP,CACL,SAACC,GAAD,CAAMC,IAAN,QACEC,CAAAA,MAAM,CAACC,MAAP,CAAc,EAAd,CAAkBH,GAAlB,CAAuBX,OAAO,CAACY,IAAD,CAAP,qBAAoBA,IAAI,CAACG,KAAzB,CAAiCH,IAAjC,CAAvB,CADF,EADK,CAGL,EAHK,CAAP,CAKD,CAT0D,CAA1B,CAA5B,CAYP,MAAO,IAAMI,CAAAA,WAAW,CAAGpB,cAAc,CAAC,CACxCO,GAAG,CAAE,QADmC,CAExCC,GAAG,CAAE,aAACa,IAAD,QAAsB,gBAAa,IAAVb,CAAAA,GAAU,OAAVA,GAAU,CACtC,GAAMc,CAAAA,SAAS,CAAGd,GAAG,CAACF,cAAD,CAArB,CACA,GAAMiB,CAAAA,SAAS,CAAGN,MAAM,CAACO,MAAP,CAAcF,SAAd,CAAlB,CACA,MAAO,CACLG,GAAG,CAAEF,SADA,CAELX,MAAM,CAAEW,SAAS,CAACG,MAAV,CAAiB,mBAAGC,CAAAA,MAAH,OAAGA,MAAH,OAAgBA,CAAAA,MAAM,GAAK,QAA3B,EAAjB,CAFH,EAGLN,IAHK,CAAP,CAID,CAPI,EAFmC,CAAD,CAAlC,CAYP,MAAO,IAAMR,CAAAA,iBAAiB,CAAGb,cAAc,CAAC,CAC9CO,GAAG,CAAE,cADyC,CAE9CC,GAAG,CAAE,aAACa,IAAD,QAAsB,gBAAa,IAAVb,CAAAA,GAAU,OAAVA,GAAU,CACtC,GAAMI,CAAAA,MAAM,CAAGJ,GAAG,CAACY,WAAW,CAACC,IAAD,CAAZ,CAAlB,CACA,MAAOT,CAAAA,MAAM,CAACc,MAAP,CAActB,OAAd,CAAP,CACD,CAHI,EAFyC,CAAD,CAAxC,CAQP,MAAO,IAAMwB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAChC,GAAMC,CAAAA,KAAK,CAAG5B,cAAc,CAACK,cAAD,CAA5B,CACA,MAAOuB,CAAAA,KAAP,CACD,CAHM,CAKP,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAA8B,IAA7BT,CAAAA,IAA6B,2DAAV,KAAU,CACrD,GAAMQ,CAAAA,KAAK,CAAG5B,cAAc,CAACmB,WAAW,CAACC,IAAD,CAAZ,CAA5B,CACA,MAAOQ,CAAAA,KAAP,CACD,CAHM,CAKP,MAAO,IAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAA8B,IAA7BV,CAAAA,IAA6B,2DAAV,KAAU,CAC3D,GAAMQ,CAAAA,KAAK,CAAG5B,cAAc,CAACY,iBAAiB,CAACQ,IAAD,CAAlB,CAA5B,CACA,MAAOQ,CAAAA,KAAP,CACD,CAHM","sourcesContent":["import { selector, selectorFamily, useRecoilValue } from \"recoil\"\nimport { Dictionary } from \"ramda\"\nimport homestead from \"../whitelist/homestead.json\"\nimport ropsten from \"../whitelist/ropsten.json\"\nimport { isAsset } from \"../types/isItem\"\nimport { networkNameQuery } from \"./network\"\n\nexport const whitelistQuery = selector<Dictionary<ListedItem>>({\n  key: \"whitelist\",\n  get: ({ get }) => {\n    const name = get(networkNameQuery)\n    const byNetwork: Dictionary<Dictionary<ListedItem>> = { homestead, ropsten }\n    return byNetwork[name] ?? {}\n  },\n})\n\nexport const assetsQuery = selector<Dictionary<ListedAsset>>({\n  key: \"assets\",\n  get: ({ get }) => {\n    const listed = get(listedAssetsQuery(\"all\"))\n    return listed.reduce<Dictionary<ListedAsset>>(\n      (acc, item) =>\n        Object.assign({}, acc, isAsset(item) && { [item.token]: item }),\n      {} as Dictionary<ListedAsset>\n    )\n  },\n})\n\nexport const listedQuery = selectorFamily({\n  key: \"listed\",\n  get: (type: ListedType) => ({ get }) => {\n    const whitelist = get(whitelistQuery)\n    const listedAll = Object.values(whitelist)\n    return {\n      all: listedAll,\n      listed: listedAll.filter(({ status }) => status === \"LISTED\"),\n    }[type]\n  },\n})\n\nexport const listedAssetsQuery = selectorFamily({\n  key: \"listedAssets\",\n  get: (type: ListedType) => ({ get }) => {\n    const listed = get(listedQuery(type))\n    return listed.filter(isAsset)\n  },\n})\n\nexport const useWhitelist = () => {\n  const value = useRecoilValue(whitelistQuery)\n  return value\n}\n\nexport const useListed = (type: ListedType = \"all\") => {\n  const value = useRecoilValue(listedQuery(type))\n  return value\n}\n\nexport const useListedAssets = (type: ListedType = \"all\") => {\n  const value = useRecoilValue(listedAssetsQuery(type))\n  return value\n}\n"]},"metadata":{},"sourceType":"module"}