{"ast":null,"code":"import { Slot } from \"@wry/context\";\nimport { dep } from \"optimism\";\nvar varDep = dep();\nexport var cacheSlot = new Slot();\n\nfunction consumeAndIterate(set, callback) {\n  var items = [];\n  set.forEach(function (item) {\n    return items.push(item);\n  });\n  set.clear();\n  items.forEach(callback);\n}\n\nexport function makeVar(value) {\n  var caches = new Set();\n  var listeners = new Set();\n\n  var rv = function rv(newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue;\n        varDep.dirty(rv);\n        caches.forEach(broadcast);\n        consumeAndIterate(listeners, function (listener) {\n          return listener(value);\n        });\n      }\n    } else {\n      var cache = cacheSlot.getValue();\n      if (cache) caches.add(cache);\n      varDep(rv);\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = function (listener) {\n    listeners.add(listener);\n    return function () {\n      listeners.delete(listener);\n    };\n  };\n\n  return rv;\n}\n\nfunction broadcast(cache) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/reactiveVars.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAAqB,cAArB;AACA,SAAS,GAAT,QAAoB,UAApB;AAWA,IAAM,MAAM,GAAG,GAAG,EAAlB;AAIA,OAAO,IAAM,SAAS,GAAG,IAAI,IAAJ,EAAlB;;AAMP,SAAS,iBAAT,CAA8B,GAA9B,EAA2C,QAA3C,EAAqE;AACnE,MAAM,KAAK,GAAQ,EAAnB;AACA,EAAA,GAAG,CAAC,OAAJ,CAAY,UAAA,IAAA,EAAI;AAAI,WAAA,KAAK,CAAC,IAAN,CAAA,IAAA,CAAA;AAAgB,GAApC;AACA,EAAA,GAAG,CAAC,KAAJ;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,QAAd;AACD;;AAED,OAAM,SAAU,OAAV,CAAqB,KAArB,EAA6B;AACjC,MAAM,MAAM,GAAG,IAAI,GAAJ,EAAf;AACA,MAAM,SAAS,GAAG,IAAI,GAAJ,EAAlB;;AAEA,MAAM,EAAE,GAAmB,SAArB,EAAqB,CAAU,QAAV,EAAkB;AAC3C,QAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAI,KAAK,KAAK,QAAd,EAAwB;AACtB,QAAA,KAAK,GAAG,QAAR;AAIA,QAAA,MAAM,CAAC,KAAP,CAAa,EAAb;AAGA,QAAA,MAAM,CAAC,OAAP,CAAe,SAAf;AAEA,QAAA,iBAAiB,CAAC,SAAD,EAAY,UAAA,QAAA,EAAQ;AAAI,iBAAA,QAAQ,CAAR,KAAQ,CAAR;AAAe,SAAvC,CAAjB;AACD;AACF,KAbD,MAaO;AAIL,UAAM,KAAK,GAAG,SAAS,CAAC,QAAV,EAAd;AACA,UAAI,KAAJ,EAAW,MAAM,CAAC,GAAP,CAAW,KAAX;AACX,MAAA,MAAM,CAAC,EAAD,CAAN;AACD;;AAED,WAAO,KAAP;AACD,GAxBD;;AA0BA,EAAA,EAAE,CAAC,YAAH,GAAkB,UAAA,QAAA,EAAQ;AACxB,IAAA,SAAS,CAAC,GAAV,CAAc,QAAd;AACA,WAAO,YAAA;AACL,MAAA,SAAS,CAAC,MAAV,CAAiB,QAAjB;AACD,KAFD;AAGD,GALD;;AAOA,SAAO,EAAP;AACD;;AAQD,SAAS,SAAT,CAAmB,KAAnB,EAAuC;AACrC,MAAI,KAAK,CAAC,gBAAV,EAA4B;AAC1B,IAAA,KAAK,CAAC,gBAAN;AACD;AACF","sourcesContent":["import { Slot } from \"@wry/context\";\nimport { dep } from \"optimism\";\nimport { InMemoryCache } from \"./inMemoryCache\";\nimport { ApolloCache } from '../../core';\n\nexport interface ReactiveVar<T> {\n  (newValue?: T): T;\n  onNextChange(listener: ReactiveListener<T>): () => void;\n}\n\nexport type ReactiveListener<T> = (value: T) => any;\n\nconst varDep = dep<ReactiveVar<any>>();\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport const cacheSlot = new Slot<ApolloCache<any>>();\n\n// A listener function could in theory cause another listener to be added\n// to the set while we're iterating over it, so it's important to commit\n// to the original elements of the set before we begin iterating. See\n// iterateObserversSafely for another example of this pattern.\nfunction consumeAndIterate<T>(set: Set<T>, callback: (item: T) => any) {\n  const items: T[] = [];\n  set.forEach(item => items.push(item));\n  set.clear();\n  items.forEach(callback);\n}\n\nexport function makeVar<T>(value: T): ReactiveVar<T> {\n  const caches = new Set<ApolloCache<any>>();\n  const listeners = new Set<ReactiveListener<T>>();\n\n  const rv: ReactiveVar<T> = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue!;\n        // First, invalidate any fields with custom read functions that\n        // consumed this variable, so query results involving those fields\n        // will be recomputed the next time we read them.\n        varDep.dirty(rv);\n        // Next, broadcast changes to any caches that have previously read\n        // from this variable.\n        caches.forEach(broadcast);\n        // Finally, notify any listeners added via rv.onNextChange.\n        consumeAndIterate(listeners, listener => listener(value));\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      const cache = cacheSlot.getValue();\n      if (cache) caches.add(cache);\n      varDep(rv);\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = listener => {\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  return rv;\n}\n\ntype Broadcastable = ApolloCache<any> & {\n  // This method is protected in InMemoryCache, which we are ignoring, but\n  // we still want some semblance of type safety when we call it.\n  broadcastWatches?: InMemoryCache[\"broadcastWatches\"];\n};\n\nfunction broadcast(cache: Broadcastable) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}