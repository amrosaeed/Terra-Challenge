{"ast":null,"code":"import{selector,selectorFamily,waitForNone}from\"recoil\";import{isAsset}from\"../types/isItem\";import{dictWithFn}from\"./dbUtils\";import{addressState}from\"./atoms\";import{abiQuery}from\"./abi\";import{whitelistQuery}from\"./assets\";import{itemQuery}from\"./asset\";export var rewardQuery=selectorFamily({key:\"reward\",get:function get(token){return function(_ref){var get=_ref.get;var address=get(addressState);var item=get(itemQuery(token));if(isAsset(item)){var pool=item.pool;var reward=get(abiQuery({token:pool,name:\"earned\",param:address}));return reward;}};}});export var rewardsQuery=selector({key:\"rewards\",get:function get(_ref2){var _get=_ref2.get;var whitelist=_get(whitelistQuery);var queries=dictWithFn(whitelist,function(_ref3){var token=_ref3.token;return rewardQuery(token);});var rewards=_get(waitForNone(queries));return rewards;}});","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/database/rewards.ts"],"names":["selector","selectorFamily","waitForNone","isAsset","dictWithFn","addressState","abiQuery","whitelistQuery","itemQuery","rewardQuery","key","get","token","address","item","pool","reward","name","param","rewardsQuery","whitelist","queries","rewards"],"mappings":"AAAA,OAASA,QAAT,CAAmBC,cAAnB,CAAmCC,WAAnC,KAAsD,QAAtD,CACA,OAASC,OAAT,KAAwB,iBAAxB,CACA,OAASC,UAAT,KAA2B,WAA3B,CACA,OAASC,YAAT,KAA6B,SAA7B,CACA,OAASC,QAAT,KAAyB,OAAzB,CACA,OAASC,cAAT,KAA+B,UAA/B,CACA,OAASC,SAAT,KAA0B,SAA1B,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAGR,cAAc,CAAC,CACxCS,GAAG,CAAE,QADmC,CAExCC,GAAG,CAAE,aAACC,KAAD,QAAmB,eAAa,IAAVD,CAAAA,GAAU,MAAVA,GAAU,CACnC,GAAME,CAAAA,OAAO,CAAGF,GAAG,CAACN,YAAD,CAAnB,CACA,GAAMS,CAAAA,IAAI,CAAGH,GAAG,CAACH,SAAS,CAACI,KAAD,CAAV,CAAhB,CAEA,GAAIT,OAAO,CAACW,IAAD,CAAX,CAAmB,IACTC,CAAAA,IADS,CACAD,IADA,CACTC,IADS,CAEjB,GAAMC,CAAAA,MAAM,CAAGL,GAAG,CAChBL,QAAQ,CAAC,CAAEM,KAAK,CAAEG,IAAT,CAAeE,IAAI,CAAE,QAArB,CAA+BC,KAAK,CAAEL,OAAtC,CAAD,CADQ,CAAlB,CAGA,MAAOG,CAAAA,MAAP,CACD,CACF,CAXI,EAFmC,CAAD,CAAlC,CAgBP,MAAO,IAAMG,CAAAA,YAAY,CAAGnB,QAAQ,CAAC,CACnCU,GAAG,CAAE,SAD8B,CAEnCC,GAAG,CAAE,mBAAa,IAAVA,CAAAA,IAAU,OAAVA,GAAU,CAChB,GAAMS,CAAAA,SAAS,CAAGT,IAAG,CAACJ,cAAD,CAArB,CACA,GAAMc,CAAAA,OAAO,CAAGjB,UAAU,CAACgB,SAAD,CAAY,mBAAGR,CAAAA,KAAH,OAAGA,KAAH,OAAeH,CAAAA,WAAW,CAACG,KAAD,CAA1B,EAAZ,CAA1B,CACA,GAAMU,CAAAA,OAAO,CAAGX,IAAG,CAACT,WAAW,CAACmB,OAAD,CAAZ,CAAnB,CACA,MAAOC,CAAAA,OAAP,CACD,CAPkC,CAAD,CAA7B","sourcesContent":["import { selector, selectorFamily, waitForNone } from \"recoil\"\nimport { isAsset } from \"../types/isItem\"\nimport { dictWithFn } from \"./dbUtils\"\nimport { addressState } from \"./atoms\"\nimport { abiQuery } from \"./abi\"\nimport { whitelistQuery } from \"./assets\"\nimport { itemQuery } from \"./asset\"\n\nexport const rewardQuery = selectorFamily({\n  key: \"reward\",\n  get: (token: string) => ({ get }) => {\n    const address = get(addressState)\n    const item = get(itemQuery(token))\n\n    if (isAsset(item)) {\n      const { pool } = item\n      const reward = get(\n        abiQuery({ token: pool, name: \"earned\", param: address })\n      )\n      return reward\n    }\n  },\n})\n\nexport const rewardsQuery = selector({\n  key: \"rewards\",\n  get: ({ get }) => {\n    const whitelist = get(whitelistQuery)\n    const queries = dictWithFn(whitelist, ({ token }) => rewardQuery(token))\n    const rewards = get(waitForNone(queries))\n    return rewards\n  },\n})\n"]},"metadata":{},"sourceType":"module"}