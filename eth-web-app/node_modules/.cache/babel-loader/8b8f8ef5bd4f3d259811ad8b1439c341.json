{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.int = exports.dec = exports.Int = exports.Dec = exports.Numeric = exports.DEC_PRECISION = void 0;\n\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\n\nexports.DEC_PRECISION = 18;\n\nvar _Dec = decimal_js_1.default.clone();\n\n_Dec.prototype.toString = function () {\n  return this.toFixed(exports.DEC_PRECISION);\n};\n\nvar Numeric;\n\n(function (Numeric) {\n  function parse(value) {\n    if (value instanceof Dec) {\n      return value;\n    } else if (typeof value === 'string') {\n      if (value.includes('.')) {\n        return new Dec(value);\n      } else {\n        return new Int(value);\n      }\n    } else {\n      var _value = new decimal_js_1.default(value);\n\n      if (_value.isInteger()) {\n        return new Int(_value);\n      } else {\n        return new Dec(_value.toString());\n      }\n    }\n  }\n\n  Numeric.parse = parse;\n})(Numeric = exports.Numeric || (exports.Numeric = {}));\n/**\n * Represents decimal values serialized with 18 digits of precision. This implementation\n * is based on the `decimal.js` library, and returns Dec values for only [[Dec.add]],\n * [[Dec.sub]], [[Dec.mul]], [[Dec.div]], and [[Dec.mod]]. For other methods inherited\n * from `Decimal`, you will need to convert back to `Dec` to remain compatible for\n * submitting information that requires `Dec` format back to the blockchain.\n *\n * Example:\n *\n * ```ts\n * const dec = new Dec(1.5);\n *\n * const decimal = dec.sqrt();\n * const dec2 = new Dec(decimal);\n */\n\n\nvar Dec =\n/** @class */\nfunction (_super) {\n  __extends(Dec, _super);\n\n  function Dec(arg) {\n    return _super.call(this, arg.toString()) || this;\n  }\n\n  Dec.withPrec = function (value, prec) {\n    return new Dec(new Dec(value).div(Math.pow(10, prec)));\n  }; // type conversion\n\n\n  Dec.prototype.toInt = function () {\n    return new Int(this);\n  }; // arithmetic\n\n\n  Dec.prototype.add = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.add.call(this, val));\n  };\n\n  Dec.prototype.sub = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.sub.call(this, val));\n  };\n\n  Dec.prototype.mul = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.mul.call(this, val));\n  };\n\n  Dec.prototype.div = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.div.call(this, val));\n  };\n\n  Dec.prototype.mod = function (other) {\n    var val = new Dec(Numeric.parse(other));\n    return new Dec(_super.prototype.mod.call(this, val));\n  };\n\n  return Dec;\n}(_Dec);\n\nexports.Dec = Dec;\n\nvar _Int = decimal_js_1.default.clone();\n/**\n * Represents Integer values. Used mainly to store integer values of [[Coin]] and [[Coins]].\n *\n * Note: Do not use to work with values greater than 9999999999999999999. This\n * implementation is based on the `decimal.js` library, and returns Int values for only\n * [[Int.add]], [[Int.sub]], [[Int.mul]], [[Int.div]], and [[Int.mod]]. For other\n * methods inherited from `Decimal`, you will need to convert back to `Int` to remain\n * compatible for submitting information that requires `Int` format back to the\n * blockchain.\n *\n * Example:\n *\n * ```ts\n * const int = new Int(1.5);\n *\n * const decimal = int.pow(3);\n * const int2 = new Int(decimal);\n */\n\n\nvar Int =\n/** @class */\nfunction (_super) {\n  __extends(Int, _super);\n\n  function Int(arg) {\n    var _this = this;\n\n    var _arg = new decimal_js_1.default(arg.toString());\n\n    _this = _super.call(this, _arg.divToInt(1)) || this;\n    return _this;\n  }\n\n  Int.prototype.toString = function () {\n    return this.toFixed();\n  }; // type conversion\n\n\n  Int.prototype.toDec = function () {\n    return new Dec(this);\n  }; // artihmetic\n\n\n  Int.prototype.add = function (other) {\n    var val = Numeric.parse(other);\n\n    if (val instanceof Dec) {\n      return new Dec(this).add(val);\n    } else {\n      return new Int(this.plus(val));\n    }\n  };\n\n  Int.prototype.sub = function (other) {\n    var val = Numeric.parse(other);\n\n    if (val instanceof Dec) {\n      return new Dec(this).sub(val);\n    } else {\n      return new Int(this.minus(val));\n    }\n  };\n\n  Int.prototype.mul = function (other) {\n    var val = Numeric.parse(other);\n\n    if (val instanceof Dec) {\n      return new Dec(this).mul(val);\n    } else {\n      return new Int(this.times(val));\n    }\n  };\n\n  Int.prototype.div = function (other) {\n    var val = Numeric.parse(other);\n\n    if (val instanceof Dec) {\n      return new Dec(this).div(val);\n    } else {\n      return new Int(_super.prototype.div.call(this, val));\n    }\n  };\n\n  Int.prototype.mod = function (other) {\n    var val = Numeric.parse(other);\n\n    if (val instanceof Dec) {\n      return new Dec(this).mod(val);\n    } else {\n      return new Int(_super.prototype.mod.call(this, val));\n    }\n  };\n\n  return Int;\n}(_Int);\n\nexports.Int = Int;\n/**\n * Template tagged literal for creating new Dec objects out of literal string.\n * This does not support literal string interpolation  with `${}`.\n *\n * Usage is:\n *\n * ```ts\n * import { dec } from \"@terra-money/terra.js\";\n *\n * const dec1 = dec`234.12312`;\n * const dec2 = new Dec(\"234.12312\");\n *\n * dec1.equals(dec2);\n * ```\n * @param strings\n */\n\nfunction dec(strings) {\n  return new Dec(strings[0]);\n}\n\nexports.dec = dec;\n/**\n * Template tagged literal for creating new Int objects out of literal string.\n * This does not support literal string interpolation  with `${}`.\n *\n * Usage is:\n *\n * ```ts\n * import { int } from \"@terra-money/terra.js\";\n *\n * const int1 = int`234`;\n * const int2 = new Int(\"234\");\n *\n * int1.equals(int2);\n * ```\n * @param strings\n */\n\nfunction int(strings) {\n  return new Int(strings[0]);\n}\n\nexports.int = int;","map":{"version":3,"sources":["../../src/core/numeric.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.int = exports.dec = exports.Int = exports.Dec = exports.Numeric = exports.DEC_PRECISION = void 0;\nvar decimal_js_1 = __importDefault(require(\"decimal.js\"));\nexports.DEC_PRECISION = 18;\nvar _Dec = decimal_js_1.default.clone();\n_Dec.prototype.toString = function () {\n    return this.toFixed(exports.DEC_PRECISION);\n};\nvar Numeric;\n(function (Numeric) {\n    function parse(value) {\n        if (value instanceof Dec) {\n            return value;\n        }\n        else if (typeof value === 'string') {\n            if (value.includes('.')) {\n                return new Dec(value);\n            }\n            else {\n                return new Int(value);\n            }\n        }\n        else {\n            var _value = new decimal_js_1.default(value);\n            if (_value.isInteger()) {\n                return new Int(_value);\n            }\n            else {\n                return new Dec(_value.toString());\n            }\n        }\n    }\n    Numeric.parse = parse;\n})(Numeric = exports.Numeric || (exports.Numeric = {}));\n/**\n * Represents decimal values serialized with 18 digits of precision. This implementation\n * is based on the `decimal.js` library, and returns Dec values for only [[Dec.add]],\n * [[Dec.sub]], [[Dec.mul]], [[Dec.div]], and [[Dec.mod]]. For other methods inherited\n * from `Decimal`, you will need to convert back to `Dec` to remain compatible for\n * submitting information that requires `Dec` format back to the blockchain.\n *\n * Example:\n *\n * ```ts\n * const dec = new Dec(1.5);\n *\n * const decimal = dec.sqrt();\n * const dec2 = new Dec(decimal);\n */\nvar Dec = /** @class */ (function (_super) {\n    __extends(Dec, _super);\n    function Dec(arg) {\n        return _super.call(this, arg.toString()) || this;\n    }\n    Dec.withPrec = function (value, prec) {\n        return new Dec(new Dec(value).div(Math.pow(10, prec)));\n    };\n    // type conversion\n    Dec.prototype.toInt = function () {\n        return new Int(this);\n    };\n    // arithmetic\n    Dec.prototype.add = function (other) {\n        var val = new Dec(Numeric.parse(other));\n        return new Dec(_super.prototype.add.call(this, val));\n    };\n    Dec.prototype.sub = function (other) {\n        var val = new Dec(Numeric.parse(other));\n        return new Dec(_super.prototype.sub.call(this, val));\n    };\n    Dec.prototype.mul = function (other) {\n        var val = new Dec(Numeric.parse(other));\n        return new Dec(_super.prototype.mul.call(this, val));\n    };\n    Dec.prototype.div = function (other) {\n        var val = new Dec(Numeric.parse(other));\n        return new Dec(_super.prototype.div.call(this, val));\n    };\n    Dec.prototype.mod = function (other) {\n        var val = new Dec(Numeric.parse(other));\n        return new Dec(_super.prototype.mod.call(this, val));\n    };\n    return Dec;\n}(_Dec));\nexports.Dec = Dec;\nvar _Int = decimal_js_1.default.clone();\n/**\n * Represents Integer values. Used mainly to store integer values of [[Coin]] and [[Coins]].\n *\n * Note: Do not use to work with values greater than 9999999999999999999. This\n * implementation is based on the `decimal.js` library, and returns Int values for only\n * [[Int.add]], [[Int.sub]], [[Int.mul]], [[Int.div]], and [[Int.mod]]. For other\n * methods inherited from `Decimal`, you will need to convert back to `Int` to remain\n * compatible for submitting information that requires `Int` format back to the\n * blockchain.\n *\n * Example:\n *\n * ```ts\n * const int = new Int(1.5);\n *\n * const decimal = int.pow(3);\n * const int2 = new Int(decimal);\n */\nvar Int = /** @class */ (function (_super) {\n    __extends(Int, _super);\n    function Int(arg) {\n        var _this = this;\n        var _arg = new decimal_js_1.default(arg.toString());\n        _this = _super.call(this, _arg.divToInt(1)) || this;\n        return _this;\n    }\n    Int.prototype.toString = function () {\n        return this.toFixed();\n    };\n    // type conversion\n    Int.prototype.toDec = function () {\n        return new Dec(this);\n    };\n    // artihmetic\n    Int.prototype.add = function (other) {\n        var val = Numeric.parse(other);\n        if (val instanceof Dec) {\n            return new Dec(this).add(val);\n        }\n        else {\n            return new Int(this.plus(val));\n        }\n    };\n    Int.prototype.sub = function (other) {\n        var val = Numeric.parse(other);\n        if (val instanceof Dec) {\n            return new Dec(this).sub(val);\n        }\n        else {\n            return new Int(this.minus(val));\n        }\n    };\n    Int.prototype.mul = function (other) {\n        var val = Numeric.parse(other);\n        if (val instanceof Dec) {\n            return new Dec(this).mul(val);\n        }\n        else {\n            return new Int(this.times(val));\n        }\n    };\n    Int.prototype.div = function (other) {\n        var val = Numeric.parse(other);\n        if (val instanceof Dec) {\n            return new Dec(this).div(val);\n        }\n        else {\n            return new Int(_super.prototype.div.call(this, val));\n        }\n    };\n    Int.prototype.mod = function (other) {\n        var val = Numeric.parse(other);\n        if (val instanceof Dec) {\n            return new Dec(this).mod(val);\n        }\n        else {\n            return new Int(_super.prototype.mod.call(this, val));\n        }\n    };\n    return Int;\n}(_Int));\nexports.Int = Int;\n/**\n * Template tagged literal for creating new Dec objects out of literal string.\n * This does not support literal string interpolation  with `${}`.\n *\n * Usage is:\n *\n * ```ts\n * import { dec } from \"@terra-money/terra.js\";\n *\n * const dec1 = dec`234.12312`;\n * const dec2 = new Dec(\"234.12312\");\n *\n * dec1.equals(dec2);\n * ```\n * @param strings\n */\nfunction dec(strings) {\n    return new Dec(strings[0]);\n}\nexports.dec = dec;\n/**\n * Template tagged literal for creating new Int objects out of literal string.\n * This does not support literal string interpolation  with `${}`.\n *\n * Usage is:\n *\n * ```ts\n * import { int } from \"@terra-money/terra.js\";\n *\n * const int1 = int`234`;\n * const int2 = new Int(\"234\");\n *\n * int1.equals(int2);\n * ```\n * @param strings\n */\nfunction int(strings) {\n    return new Int(strings[0]);\n}\nexports.int = int;\n//# sourceMappingURL=numeric.js.map"]},"metadata":{},"sourceType":"script"}