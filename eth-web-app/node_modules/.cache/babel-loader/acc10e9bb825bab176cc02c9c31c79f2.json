{"ast":null,"code":"import _objectSpread from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{gt}from\"../../libs/math\";import{format}from\"../../libs/parse\";import Card from\"../../components/Card\";import Table from\"../../components/Table\";import Delisted from\"../../components/Delisted\";import DashboardActions from\"../../components/DashboardActions\";import{useWhitelist}from\"../../database/assets\";import{useBalances}from\"../../database/balances\";var Holdings=function Holdings(){var whitelist=useWhitelist();var balances=useBalances();var loading=Object.values(balances).some(function(_ref){var state=_ref.state;return state!==\"hasValue\";});var dataSource=Object.entries(balances).filter(function(_ref2){var _ref3=_slicedToArray(_ref2,2),balance=_ref3[1].contents;return gt(balance,0);}).map(function(_ref4){var _ref5=_slicedToArray(_ref4,2),token=_ref5[0],balance=_ref5[1].contents;return _objectSpread(_objectSpread({},whitelist[token]),{},{token:token,balance:balance});});var empty=!loading&&!dataSource.length;return/*#__PURE__*/_jsx(Card,{title:\"Holdings\",loading:loading,children:empty?/*#__PURE__*/_jsx(\"p\",{children:\"No data\"}):/*#__PURE__*/_jsx(Table,{columns:[{key:\"symbol\",title:\"Ticker\",render:function render(symbol,_ref6){var status=_ref6.status;return/*#__PURE__*/_jsxs(_Fragment,{children:[status===\"DELISTED\"&&/*#__PURE__*/_jsx(Delisted,{}),symbol]});},bold:true},{key:\"name\",title:\"Underlying Name\"},{key:\"balance\",title:\"Balance\",render:function render(value,_ref7){var symbol=_ref7.symbol;return format(value,symbol);},align:\"right\"},{key:\"actions\",dataIndex:\"token\",render:function render(token){var send={to:\"/send/\".concat(token),children:\"Send\"};return/*#__PURE__*/_jsx(DashboardActions,{list:[send]});},align:\"right\",fixed:\"right\"}],dataSource:dataSource})});};export default Holdings;","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/pages/my/Holdings.tsx"],"names":["gt","format","Card","Table","Delisted","DashboardActions","useWhitelist","useBalances","Holdings","whitelist","balances","loading","Object","values","some","state","dataSource","entries","filter","balance","contents","map","token","empty","length","key","title","render","symbol","status","bold","value","align","dataIndex","send","to","children","fixed"],"mappings":"ocAAA,OAASA,EAAT,KAAmB,iBAAnB,CACA,OAASC,MAAT,KAAuB,kBAAvB,CACA,MAAOC,CAAAA,IAAP,KAAiB,uBAAjB,CACA,MAAOC,CAAAA,KAAP,KAAkB,wBAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,2BAArB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,mCAA7B,CACA,OAASC,YAAT,KAA6B,uBAA7B,CACA,OAASC,WAAT,KAA4B,yBAA5B,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,GAAMC,CAAAA,SAAS,CAAGH,YAAY,EAA9B,CACA,GAAMI,CAAAA,QAAQ,CAAGH,WAAW,EAA5B,CAEA,GAAMI,CAAAA,OAAO,CAAGC,MAAM,CAACC,MAAP,CAAcH,QAAd,EAAwBI,IAAxB,CACd,kBAAGC,CAAAA,KAAH,MAAGA,KAAH,OAAeA,CAAAA,KAAK,GAAK,UAAzB,EADc,CAAhB,CAIA,GAAMC,CAAAA,UAAU,CAAGJ,MAAM,CAACK,OAAP,CAAeP,QAAf,EAChBQ,MADgB,CACT,kDAAgBC,OAAhB,UAAMC,QAAN,OAA+BpB,CAAAA,EAAE,CAACmB,OAAD,CAAoB,CAApB,CAAjC,EADS,EAEhBE,GAFgB,CAEZ,eAAoC,mCAAlCC,KAAkC,UAAfH,OAAe,UAAzBC,QAAyB,CACvC,sCAAYX,SAAS,CAACa,KAAD,CAArB,MAA8BA,KAAK,CAALA,KAA9B,CAAqCH,OAAO,CAAPA,OAArC,GACD,CAJgB,CAAnB,CAMA,GAAMI,CAAAA,KAAK,CAAG,CAACZ,OAAD,EAAY,CAACK,UAAU,CAACQ,MAAtC,CAEA,mBACE,KAAC,IAAD,EAAM,KAAK,CAAC,UAAZ,CAAuB,OAAO,CAAEb,OAAhC,UACGY,KAAK,cACJ,8BADI,cAGJ,KAAC,KAAD,EACE,OAAO,CAAE,CACP,CACEE,GAAG,CAAE,QADP,CAEEC,KAAK,CAAE,QAFT,CAGEC,MAAM,CAAE,gBAACC,MAAD,WAAWC,CAAAA,MAAX,OAAWA,MAAX,oBACN,2BACGA,MAAM,GAAK,UAAX,eAAyB,KAAC,QAAD,IAD5B,CAEGD,MAFH,GADM,EAHV,CASEE,IAAI,CAAE,IATR,CADO,CAYP,CACEL,GAAG,CAAE,MADP,CAEEC,KAAK,CAAE,iBAFT,CAZO,CAgBP,CACED,GAAG,CAAE,SADP,CAEEC,KAAK,CAAE,SAFT,CAGEC,MAAM,CAAE,gBAACI,KAAD,WAAUH,CAAAA,MAAV,OAAUA,MAAV,OAAuB3B,CAAAA,MAAM,CAAC8B,KAAD,CAAQH,MAAR,CAA7B,EAHV,CAIEI,KAAK,CAAE,OAJT,CAhBO,CAsBP,CACEP,GAAG,CAAE,SADP,CAEEQ,SAAS,CAAE,OAFb,CAGEN,MAAM,CAAE,gBAACL,KAAD,CAAW,CACjB,GAAMY,CAAAA,IAAI,CAAG,CAAEC,EAAE,iBAAWb,KAAX,CAAJ,CAAwBc,QAAQ,CAAE,MAAlC,CAAb,CACA,mBAAO,KAAC,gBAAD,EAAkB,IAAI,CAAE,CAACF,IAAD,CAAxB,EAAP,CACD,CANH,CAOEF,KAAK,CAAE,OAPT,CAQEK,KAAK,CAAE,OART,CAtBO,CADX,CAkCE,UAAU,CAAErB,UAlCd,EAJJ,EADF,CA4CD,CA5DD,CA8DA,cAAeR,CAAAA,QAAf","sourcesContent":["import { gt } from \"../../libs/math\"\nimport { format } from \"../../libs/parse\"\nimport Card from \"../../components/Card\"\nimport Table from \"../../components/Table\"\nimport Delisted from \"../../components/Delisted\"\nimport DashboardActions from \"../../components/DashboardActions\"\nimport { useWhitelist } from \"../../database/assets\"\nimport { useBalances } from \"../../database/balances\"\n\nconst Holdings = () => {\n  const whitelist = useWhitelist()\n  const balances = useBalances()\n\n  const loading = Object.values(balances).some(\n    ({ state }) => state !== \"hasValue\"\n  )\n\n  const dataSource = Object.entries(balances)\n    .filter(([, { contents: balance }]) => gt(balance as string, 0))\n    .map(([token, { contents: balance }]) => {\n      return { ...whitelist[token], token, balance }\n    })\n\n  const empty = !loading && !dataSource.length\n\n  return (\n    <Card title=\"Holdings\" loading={loading}>\n      {empty ? (\n        <p>No data</p>\n      ) : (\n        <Table\n          columns={[\n            {\n              key: \"symbol\",\n              title: \"Ticker\",\n              render: (symbol, { status }) => (\n                <>\n                  {status === \"DELISTED\" && <Delisted />}\n                  {symbol}\n                </>\n              ),\n              bold: true,\n            },\n            {\n              key: \"name\",\n              title: \"Underlying Name\",\n            },\n            {\n              key: \"balance\",\n              title: \"Balance\",\n              render: (value, { symbol }) => format(value, symbol),\n              align: \"right\",\n            },\n            {\n              key: \"actions\",\n              dataIndex: \"token\",\n              render: (token) => {\n                const send = { to: `/send/${token}`, children: \"Send\" }\n                return <DashboardActions list={[send]} />\n              },\n              align: \"right\",\n              fixed: \"right\",\n            },\n          ]}\n          dataSource={dataSource}\n        />\n      )}\n    </Card>\n  )\n}\n\nexport default Holdings\n"]},"metadata":{},"sourceType":"module"}