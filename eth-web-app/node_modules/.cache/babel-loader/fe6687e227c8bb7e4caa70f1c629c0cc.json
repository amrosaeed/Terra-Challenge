{"ast":null,"code":"import{selector,selectorFamily}from\"recoil\";import getLinks from\"../ethereum/uniswap\";import{itemBySymbolQuery}from\"./asset\";export var getUniswapLinksQuery=selector({key:\"getUniswapLinks\",get:function get(_ref){var _get=_ref.get;var _ref2=_get(itemBySymbolQuery(\"UST\")),ust=_ref2.token;return function(token){return getLinks({input:ust,output:token});};}});export var uniswapLinksQuery=selectorFamily({key:\"uniswapLinks\",get:function get(token){return function(_ref3){var get=_ref3.get;var _ref4=get(itemBySymbolQuery(\"UST\")),ust=_ref4.token;return getLinks({input:ust,output:token});};}});","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/database/uniswap.ts"],"names":["selector","selectorFamily","getLinks","itemBySymbolQuery","getUniswapLinksQuery","key","get","ust","token","input","output","uniswapLinksQuery"],"mappings":"AAAA,OAASA,QAAT,CAAmBC,cAAnB,KAAyC,QAAzC,CACA,MAAOC,CAAAA,QAAP,KAAqB,qBAArB,CACA,OAASC,iBAAT,KAAkC,SAAlC,CAEA,MAAO,IAAMC,CAAAA,oBAAoB,CAAGJ,QAAQ,CAAC,CAC3CK,GAAG,CAAE,iBADsC,CAE3CC,GAAG,CAAE,kBAAa,IAAVA,CAAAA,IAAU,MAAVA,GAAU,WACOA,IAAG,CAACH,iBAAiB,CAAC,KAAD,CAAlB,CADV,CACDI,GADC,OACRC,KADQ,CAEhB,MAAO,UAACA,KAAD,QAAmBN,CAAAA,QAAQ,CAAC,CAAEO,KAAK,CAAEF,GAAT,CAAcG,MAAM,CAAEF,KAAtB,CAAD,CAA3B,EAAP,CACD,CAL0C,CAAD,CAArC,CAQP,MAAO,IAAMG,CAAAA,iBAAiB,CAAGV,cAAc,CAAC,CAC9CI,GAAG,CAAE,cADyC,CAE9CC,GAAG,CAAE,aAACE,KAAD,QAAmB,gBAAa,IAAVF,CAAAA,GAAU,OAAVA,GAAU,WACZA,GAAG,CAACH,iBAAiB,CAAC,KAAD,CAAlB,CADS,CACpBI,GADoB,OAC3BC,KAD2B,CAEnC,MAAON,CAAAA,QAAQ,CAAC,CAAEO,KAAK,CAAEF,GAAT,CAAcG,MAAM,CAAEF,KAAtB,CAAD,CAAf,CACD,CAHI,EAFyC,CAAD,CAAxC","sourcesContent":["import { selector, selectorFamily } from \"recoil\"\nimport getLinks from \"../ethereum/uniswap\"\nimport { itemBySymbolQuery } from \"./asset\"\n\nexport const getUniswapLinksQuery = selector({\n  key: \"getUniswapLinks\",\n  get: ({ get }) => {\n    const { token: ust } = get(itemBySymbolQuery(\"UST\"))!\n    return (token: string) => getLinks({ input: ust, output: token })\n  },\n})\n\nexport const uniswapLinksQuery = selectorFamily({\n  key: \"uniswapLinks\",\n  get: (token: string) => ({ get }) => {\n    const { token: ust } = get(itemBySymbolQuery(\"UST\"))!\n    return getLinks({ input: ust, output: token })\n  },\n})\n"]},"metadata":{},"sourceType":"module"}