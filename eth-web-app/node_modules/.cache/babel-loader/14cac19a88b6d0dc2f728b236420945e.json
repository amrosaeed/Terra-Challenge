{"ast":null,"code":"import _objectSpread from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{useRouteMatch}from\"react-router-dom\";import bech32 from\"bech32\";import{ethers}from\"ethers\";import{AccAddress}from\"@terra-money/terra.js\";import useForm from\"../libs/useForm\";import{lookup}from\"../libs/parse\";import{placeholder,step,validate as v}from\"../libs/formHelpers\";import{renderBalance}from\"../libs/formHelpers\";import FormGroup from\"../components/FormGroup\";import{useSymbol}from\"../database/asset\";import{useBalance}from\"../database/balance\";import{useContract}from\"../database/contract\";import FormContainer from\"../forms/FormContainer\";var Key;(function(Key){Key[\"to\"]=\"to\";Key[\"value\"]=\"value\";})(Key||(Key={}));var Send=function Send(){var _initial,_getFields;/* context */var _useRouteMatch=useRouteMatch(),params=_useRouteMatch.params;var token=params.token;var symbol=useSymbol(token);var balance=useBalance(token);/* form:validate */var validate=function validate(_ref){var _ref2;var to=_ref.to,value=_ref.value;return _ref2={},_defineProperty(_ref2,Key.to,v.address(to,[ethers.utils.isAddress,AccAddress.validate])),_defineProperty(_ref2,Key.value,v.amount(value,{symbol:symbol,max:balance})),_ref2;};/* form:hook */var initial=(_initial={},_defineProperty(_initial,Key.to,\"\"),_defineProperty(_initial,Key.value,\"\"),_initial);var form=useForm(initial,validate);var values=form.values,setValue=form.setValue,getFields=form.getFields,attrs=form.attrs,invalid=form.invalid;var to=values.to,value=values.value;var decoded=decodeTerraAddress(to);var amount=ethers.utils.parseEther(value||\"0\");var isTerra=AccAddress.validate(to)&&ethers.utils.isAddress(decoded);/* render:form */var fields=getFields((_getFields={},_defineProperty(_getFields,Key.to,{label:\"Send to\",input:{placeholder:\"Ethereum address or Terra address\",autoFocus:true},unit:isTerra&&\"Terra\"}),_defineProperty(_getFields,Key.value,{label:\"Amount\",input:{type:\"number\",step:step(symbol),placeholder:placeholder(symbol)},unit:symbol,max:function max(){return setValue(Key.value,lookup(balance,symbol));},help:renderBalance(balance,symbol)}),_getFields));/* submit */var messages=[\"Double check if the above transaction requires a memo\"];var disabled=invalid;var contract=useContract(token);var tx=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(signer){var withSigner,tx,_yield$tx,hash;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:withSigner=contract.connect(signer);tx=!isTerra?withSigner.transfer(to,amount):withSigner.burn(amount,decoded.padEnd(66,\"0\"));_context.next=4;return tx;case 4:_yield$tx=_context.sent;hash=_yield$tx.hash;return _context.abrupt(\"return\",hash);case 7:case\"end\":return _context.stop();}}},_callee);}));return function tx(_x){return _ref3.apply(this,arguments);};}();var tab={tabs:[\"Send\"],current:\"Send\"};var container={tab:tab,attrs:attrs,messages:messages,disabled:disabled,tx:tx};return/*#__PURE__*/_jsxs(FormContainer,_objectSpread(_objectSpread({},container),{},{children:[/*#__PURE__*/_jsx(FormGroup,_objectSpread({},fields[Key.to])),/*#__PURE__*/_jsx(FormGroup,_objectSpread({},fields[Key.value]))]}));};export default Send;/* bech32 */var decodeTerraAddress=function decodeTerraAddress(address){try{var _bech32$decode=bech32.decode(address),words=_bech32$decode.words;var data=bech32.fromWords(words);return\"0x\"+Buffer.from(data).toString(\"hex\");}catch(error){return\"\";}};","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/forms/SendForm.tsx"],"names":["useRouteMatch","bech32","ethers","AccAddress","useForm","lookup","placeholder","step","validate","v","renderBalance","FormGroup","useSymbol","useBalance","useContract","FormContainer","Key","Send","params","token","symbol","balance","to","value","address","utils","isAddress","amount","max","initial","form","values","setValue","getFields","attrs","invalid","decoded","decodeTerraAddress","parseEther","isTerra","fields","label","input","autoFocus","unit","type","help","messages","disabled","contract","tx","signer","withSigner","connect","transfer","burn","padEnd","hash","tab","tabs","current","container","decode","words","data","fromWords","Buffer","from","toString","error"],"mappings":"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","sourcesContent":["import { useRouteMatch } from \"react-router-dom\"\nimport bech32 from \"bech32\"\nimport { ethers } from \"ethers\"\nimport { AccAddress } from \"@terra-money/terra.js\"\n\nimport useForm from \"../libs/useForm\"\nimport { lookup } from \"../libs/parse\"\nimport { placeholder, step, validate as v } from \"../libs/formHelpers\"\nimport { renderBalance } from \"../libs/formHelpers\"\nimport FormGroup from \"../components/FormGroup\"\n\nimport { useSymbol } from \"../database/asset\"\nimport { useBalance } from \"../database/balance\"\nimport { useContract } from \"../database/contract\"\nimport FormContainer from \"../forms/FormContainer\"\n\nenum Key {\n  to = \"to\",\n  value = \"value\",\n}\n\nconst Send = () => {\n  /* context */\n  const { params } = useRouteMatch<{ token: string }>()\n  const { token } = params\n  const symbol = useSymbol(token)\n  const balance = useBalance(token)\n\n  /* form:validate */\n  const validate = ({ to, value }: Values<Key>) => ({\n    [Key.to]: v.address(to, [ethers.utils.isAddress, AccAddress.validate]),\n    [Key.value]: v.amount(value, { symbol, max: balance }),\n  })\n\n  /* form:hook */\n  const initial = { [Key.to]: \"\", [Key.value]: \"\" }\n  const form = useForm(initial, validate)\n  const { values, setValue, getFields, attrs, invalid } = form\n  const { to, value } = values\n  const decoded = decodeTerraAddress(to)\n  const amount = ethers.utils.parseEther(value || \"0\")\n  const isTerra = AccAddress.validate(to) && ethers.utils.isAddress(decoded)\n\n  /* render:form */\n  const fields = getFields({\n    [Key.to]: {\n      label: \"Send to\",\n      input: {\n        placeholder: \"Ethereum address or Terra address\",\n        autoFocus: true,\n      },\n      unit: isTerra && \"Terra\",\n    },\n\n    [Key.value]: {\n      label: \"Amount\",\n      input: {\n        type: \"number\",\n        step: step(symbol),\n        placeholder: placeholder(symbol),\n      },\n      unit: symbol,\n      max: () => setValue(Key.value, lookup(balance, symbol)),\n      help: renderBalance(balance, symbol),\n    },\n  })\n\n  /* submit */\n  const messages = [\"Double check if the above transaction requires a memo\"]\n\n  const disabled = invalid\n\n  const contract = useContract(token)\n  const tx = async (signer: ethers.providers.JsonRpcSigner) => {\n    const withSigner = contract!.connect(signer)\n\n    const tx = !isTerra\n      ? withSigner.transfer(to, amount)\n      : withSigner.burn(amount, decoded.padEnd(66, \"0\"))\n\n    const { hash } = await tx\n    return hash\n  }\n\n  const tab = { tabs: [\"Send\"], current: \"Send\" }\n  const container = { tab, attrs, messages, disabled, tx }\n\n  return (\n    <FormContainer {...container}>\n      <FormGroup {...fields[Key.to]} />\n      <FormGroup {...fields[Key.value]} />\n    </FormContainer>\n  )\n}\n\nexport default Send\n\n/* bech32 */\nconst decodeTerraAddress = (address: string) => {\n  try {\n    const { words } = bech32.decode(address)\n    const data = bech32.fromWords(words)\n    return \"0x\" + Buffer.from(data).toString(\"hex\")\n  } catch (error) {\n    return \"\"\n  }\n}\n"]},"metadata":{},"sourceType":"module"}