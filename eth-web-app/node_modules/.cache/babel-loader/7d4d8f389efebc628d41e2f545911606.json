{"ast":null,"code":"import _regeneratorRuntime from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/amro/MirrorProtocol/eth-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{selector,selectorFamily}from\"recoil\";import{MAINNET}from\"../constants\";import{providerState}from\"./atoms\";export var networkQuery=selector({key:\"network\",get:function(){var _get2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref){var _get,provider,network;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_get=_ref.get;_context.prev=1;provider=_get(providerState);_context.next=5;return provider===null||provider===void 0?void 0:provider.getNetwork();case 5:network=_context.sent;return _context.abrupt(\"return\",network);case 9:_context.prev=9;_context.t0=_context[\"catch\"](1);return _context.abrupt(\"return\");case 12:case\"end\":return _context.stop();}}},_callee,null,[[1,9]]);}));function get(_x){return _get2.apply(this,arguments);}return get;}()});export var networkNameQuery=selector({key:\"networkName\",get:function get(_ref2){var _network$name;var _get3=_ref2.get;var network=_get3(networkQuery);return(_network$name=network===null||network===void 0?void 0:network.name)!==null&&_network$name!==void 0?_network$name:MAINNET;}});export var etherscanQuery=selectorFamily({key:\"etherscan\",get:function get(path){return function(_ref3){var get=_ref3.get;var name=get(networkNameQuery);var subdomain=name===MAINNET?\"\":\"\".concat(name,\".\");return function(hash){return\"https://\".concat(subdomain,\"etherscan.io/\").concat(path,\"/\").concat(hash);};};}});","map":{"version":3,"sources":["/home/amro/MirrorProtocol/eth-web-app/src/database/network.ts"],"names":["selector","selectorFamily","MAINNET","providerState","networkQuery","key","get","provider","getNetwork","network","networkNameQuery","name","etherscanQuery","path","subdomain","hash"],"mappings":"qTAAA,OAASA,QAAT,CAAmBC,cAAnB,KAAyC,QAAzC,CACA,OAASC,OAAT,KAAwB,cAAxB,CACA,OAASC,aAAT,KAA8B,SAA9B,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAGJ,QAAQ,CAAC,CACnCK,GAAG,CAAE,SAD8B,CAEnCC,GAAG,8EAAE,iKAASA,IAAT,MAASA,GAAT,iBAEKC,QAFL,CAEgBD,IAAG,CAACH,aAAD,CAFnB,uBAGqBI,CAAAA,QAHrB,SAGqBA,QAHrB,iBAGqBA,QAAQ,CAAEC,UAAV,EAHrB,QAGKC,OAHL,+CAIMA,OAJN,+JAAF,sEAFgC,CAAD,CAA7B,CAaP,MAAO,IAAMC,CAAAA,gBAAgB,CAAGV,QAAQ,CAAC,CACvCK,GAAG,CAAE,aADkC,CAEvCC,GAAG,CAAE,mBAAa,sBAAVA,CAAAA,KAAU,OAAVA,GAAU,CAChB,GAAMG,CAAAA,OAAO,CAAGH,KAAG,CAACF,YAAD,CAAnB,CACA,qBAAOK,OAAP,SAAOA,OAAP,iBAAOA,OAAO,CAAEE,IAAhB,+CAAwBT,OAAxB,CACD,CALsC,CAAD,CAAjC,CAQP,MAAO,IAAMU,CAAAA,cAAc,CAAGX,cAAc,CAAC,CAC3CI,GAAG,CAAE,WADsC,CAE3CC,GAAG,CAAE,aAACO,IAAD,QAA4B,gBAAa,IAAVP,CAAAA,GAAU,OAAVA,GAAU,CAC5C,GAAMK,CAAAA,IAAI,CAAGL,GAAG,CAACI,gBAAD,CAAhB,CACA,GAAMI,CAAAA,SAAS,CAAGH,IAAI,GAAKT,OAAT,CAAmB,EAAnB,WAA2BS,IAA3B,KAAlB,CACA,MAAO,UAACI,IAAD,0BAA6BD,SAA7B,yBAAsDD,IAAtD,aAA8DE,IAA9D,GAAP,CACD,CAJI,EAFsC,CAAD,CAArC","sourcesContent":["import { selector, selectorFamily } from \"recoil\"\nimport { MAINNET } from \"../constants\"\nimport { providerState } from \"./atoms\"\n\nexport const networkQuery = selector({\n  key: \"network\",\n  get: async ({ get }) => {\n    try {\n      const provider = get(providerState)\n      const network = await provider?.getNetwork()\n      return network\n    } catch {\n      return\n    }\n  },\n})\n\nexport const networkNameQuery = selector({\n  key: \"networkName\",\n  get: ({ get }) => {\n    const network = get(networkQuery)\n    return network?.name ?? MAINNET\n  },\n})\n\nexport const etherscanQuery = selectorFamily({\n  key: \"etherscan\",\n  get: (path: \"address\" | \"tx\") => ({ get }) => {\n    const name = get(networkNameQuery)\n    const subdomain = name === MAINNET ? \"\" : `${name}.`\n    return (hash: string) => `https://${subdomain}etherscan.io/${path}/${hash}`\n  },\n})\n"]},"metadata":{},"sourceType":"module"}